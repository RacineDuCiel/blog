[{"content":"Introduction to Bluetooth 1. What is Bluetooth?\nWireless technology standard for short-distance data transfer. Operates in the ISM band from 2.402 GHz to 2.480 GHz. Named after King Harald Bluetooth, unifying Denmark and Norway. Widely adopted for its flexibility and ease of use. 2. Bluetooth Functionality:\nPairing Process:\nDiscovery: Devices broadcast presence. Pairing Request: Devices find each other. Authentication: Devices authenticate using a shared secret (link key). Piconets:\nCollection of connected devices (1 main, up to 7 clients). Main device coordinates communication. Scatternet:\nInterconnected piconets forming a larger network. Some devices act as bridges for inter-piconet communication. Data Transfer:\nUtilizes Synchronous Connection-Oriented (SCO) and Asynchronous Connection-Less (ACL) links. SCO for audio, ACL for other data types. Packet transmission scheduled by the primary device. 3. Bluetooth Risks:\nUnauthorised Access:\nAttackers gain unsolicited access to devices, compromising data and privacy. Data Theft:\nExploiting vulnerabilities to steal personal and sensitive data transmitted over Bluetooth. Interference:\nShared frequency band may lead to intentional or unintentional disruptions in communication. Denial of Service (DoS):\nOverwhelming devices with requests, rendering them unresponsive. Device Tracking:\nExploiting Bluetooth signals to track physical locations of devices, compromising privacy. 4. Bluetooth Attacks:\nBluejacking: Sending unsolicited messages, infringing on privacy. Bluesnarfing: Unauthorized access to device data. Bluebugging: Remote control of Bluetooth devices. Car Whisperer: Targeting vehicles to unlock or start remotely. Bluesmacking \u0026amp; DoS: Overwhelming devices with connection requests. Man-in-the-Middle: Intercepting and manipulating data. BlueBorne: Critical vulnerability allowing control without user interaction. Key Extraction: Retrieving encryption keys for data access. Eavesdropping: Intercepting and listening to communications. Bluetooth Impersonation Attack: Deceiving users to connect to malicious devices. Bluetooth Legacy Attacks 1. Bluejacking:\nDescription: Sending unsolicited messages to Bluetooth-enabled devices. Method: Utilizes Bluetooth \u0026ldquo;business card\u0026rdquo; feature to send anonymous messages. Profile Used: Object Push Profile (OPP) for basic file exchange. Impact: Generally limited to annoyance, but can be used maliciously for social engineering attacks. 2. Bluesnarfing:\nDescription: Unauthorized access to Bluetooth-enabled device data. Method: Exploits Bluetooth vulnerabilities to extract information without user knowledge. Impact: Significant data theft potential, including contacts, messages, emails, and media files. 3. Bluebugging:\nDescription: Gain full control over a Bluetooth-enabled device. Method: Exploits Bluetooth vulnerabilities to access and modify device information, make calls, send messages, etc. Impact: Severe invasion of privacy, potential for covert surveillance using device microphone and camera. 4. BlueSmacking:\nDescription: Denial-of-service (DoS) attack targeting Bluetooth devices. Method: Exploits L2CAP Bluetooth protocol vulnerability to overwhelm device processing with large packets. Impact: Renders targeted device unusable temporarily; less effective on modern devices due to firmware and software improvements. AirDrop Vulnerabilities:\nDescription: Vulnerabilities in Apple\u0026rsquo;s AirDrop feature for iOS and macOS devices. Method: Exploited for spamming purposes, sending unsolicited files to devices set to receive from \u0026ldquo;Everyone\u0026rdquo;. Impact: Potential for nuisance or malicious content distribution, addressed through software updates and settings modifications. Mitigation Strategies:\nKeep devices updated with the latest firmware and security patches. Implement security measures such as changing default settings and restricting file-sharing permissions. Exercise caution when receiving unsolicited files or messages via Bluetooth or AirDrop. Follow recommended security practices to minimize risks associated with Bluetooth vulnerabilities. Modern Bluetooth Attacks and Mitigation 1. BlueBorne:\nDescription: Exploits Bluetooth vulnerabilities to gain control over devices without requiring pairing. Impact: Allows for remote code execution and Man-in-The-Middle attacks on a wide range of Bluetooth-enabled devices. Mitigation: Ensure devices are updated with security patches; increase awareness of Bluetooth security risks. 2. KNOB Attack:\nDescription: Undermines Bluetooth encryption by forcing a weak encryption key negotiation. Impact: Allows attackers to crack encryption keys, gaining access to encrypted communication. Mitigation: Update devices with patches addressing the vulnerability; ensure devices negotiate encryption keys with a minimum length of seven bytes. 3. BIAS:\nDescription: Exploits Bluetooth BR/EDR specification to impersonate devices during pairing and connection processes. Impact: Enables attackers to authenticate as trusted devices and conduct Man-in-The-Middle attacks. Mitigation: Apply firmware updates addressing Bluetooth Classic protocol vulnerabilities; maintain device software up-to-date. Mitigation Strategies:\nKeep Devices Updated: Regularly update firmware and software to patch security vulnerabilities. Disable Bluetooth When Not Needed: Turn off Bluetooth when not in use to minimize attack opportunities. Enable Device Pairing Authorization: Require authentication and authorization before device pairing to prevent unauthorized connections. Limit Device Visibility: Set devices to be invisible or undiscoverable when not in use to restrict visibility to potential attackers. Exercise Caution in Public Settings: Be cautious when using Bluetooth in public spaces to avoid pairing with unknown devices and potential attacks. Introduction to Cryptanalysis 1. What is Cryptanalysis?\nCryptanalysis is the art and science of breaking ciphertext without access to the encryption key. Its objective includes assessing encryption strength and deciphering encrypted data. 2. Cryptographic Terminology:\nPlain Text: Original, readable message or data. Cipher Text: Encrypted, unreadable form of plain text. Key: Information used in encryption and decryption. Symmetric Encryption: Uses the same key for encryption and decryption. Asymmetric Encryption: Uses a public key for encryption and a private key for decryption. 3. Techniques in Cryptanalysis:\nFrequency Analysis: Statistical study of characters or symbols in ciphertext. Pattern Finding: Identifying recurring patterns in ciphertext to reveal plaintext structure. Brute Force Attacks: Trying all possible keys until the correct one is found. 4. History of Cryptanalysis:\nAncient Civilizations: Early instances of encryption in ancient Egypt and Greece. Al-Kindi: Arab scientist introduced frequency analysis in cryptanalysis. Renaissance: Giovanni Battista della Porta\u0026rsquo;s work on cyphers and decryption methods. World Wars: Cryptanalysis played a crucial role, notably breaking the Enigma machine cypher. Modern Era: Advent of digital computers and the Internet revolutionized cryptanalysis with more complex encryption algorithms. 5. Importance of Cryptanalysis:\nEnsures encryption techniques remain robust against evolving threats. Crucial in safeguarding sensitive information in various domains, including military, finance, and communications. 6. Future Trends:\nContinued evolution of encryption algorithms and cryptanalysis techniques. Growing importance in cybersecurity as digital communication and data exchange expand. Cryptanalysis Side-Channel Attacks Overview: Cryptanalysis Side-Channel Attacks exploit unintentional information leaks during cryptographic algorithm execution, focusing on physical implementation rather than mathematical flaws.\nTypes of Side-Channel Attacks:\nPassive Side-Channel Attacks:\nAttacker observes system behavior without interference. Examples: Monitoring power consumption, timing, electromagnetic emissions. Active Side-Channel Attacks:\nAttacker manipulates the system to induce informative changes. Examples: Modifying power supply, introducing specific inputs. Common Forms:\nTiming Attacks:\nExploit variations in computation time. Example: Paul Kocher\u0026rsquo;s 1996 SSL/TLS timing attack. Mitigation: Constant-time algorithms. Power-Monitoring Attacks:\nExploit power consumption variations. Types: Simple Power Analysis (SPA), Differential Power Analysis (DPA). Example: Kocher, Jaffe, and Jun\u0026rsquo;s 1999 DPA attack. Mitigation: Hardware and software countermeasures, power regulation, randomization. Acoustic Cryptanalysis:\nExploit sound emissions during system operation. Example: Genkin, Shamir, and Tromer\u0026rsquo;s RSA key extraction via acoustic signals. Mitigation: Sound-absorbing materials, isolation of sensitive components, random noise introduction. Notable Demonstrations:\nKocher\u0026rsquo;s 1996 timing attack on SSL/TLS. Kocher, Jaffe, and Jun\u0026rsquo;s 1999 DPA attack on smart cards. Genkin, Shamir, and Tromer\u0026rsquo;s 2014 RSA key extraction via acoustic signals. Georgi Gerganov\u0026rsquo;s Keytap, demonstrating keyboard eavesdropping. Mitigation Techniques:\nConstant-time algorithms for timing attacks. Hardware countermeasures like power regulation and randomization. Software strategies to obfuscate power consumption patterns and sound emissions. Understanding Microprocessors What is a Microprocessor:\nIntegrated circuit (IC) serving as a CPU on a single chip. Facilitates fetch, decode, and execute instructions. Components: Control Unit (CU), Arithmetic Logic Unit (ALU), Instruction Set Architecture (ISA). Transistors:\nBasic electronic switches representing binary states (1s and 0s). Essential in fetch-decode-execute cycle for storing and manipulating binary data. Microprocessor Design:\nArchitectural Design:\nFormulates processor\u0026rsquo;s architectural specifications. Influences performance, power efficiency, and cost. Choices include CISC (Complex Instruction Set Computer) and RISC (Reduced Instruction Set Computer) architectures. Logic Design:\nTranslates architectural specifications into concrete logic operations. Creates data path and control units. Results in Register-Transfer Level (RTL) description. Circuit Design:\nConverts RTL into electronic circuits using transistors, resistors, and capacitors. Optimizes for speed, power consumption, and silicon area. Physical Design:\nDefines spatial layout of components on silicon chip. Considers factors like heat dissipation and power distribution. Verification:\nEnsures microprocessor performs as intended. Utilizes formal methods and static timing analysis. Identifies and rectifies potential issues before mass fabrication. Microprocessor Optimization Strategies:\nPipelining:\nBreaks down instruction execution into discrete stages processed simultaneously. Improves instruction throughput and resource utilization. Speculative Execution:\nMakes educated guesses about program paths, particularly at conditional branches. Executes instructions along the predicted path to save time. Requires efficient rollback mechanism for incorrect predictions. Caching:\nStores frequently or recently accessed data in small, high-speed memory units (caches). Speeds up memory access by reducing reliance on slower main memory. Organized in hierarchical levels (L1, L2, L3), with L1 being the fastest. Can be vulnerable to cache-based side-channel attacks, exploiting timing differences in memory access. Microprocessor Vulnerabilities Overview: Microprocessor vulnerabilities arise from design or implementation flaws, compromising system security across hardware, firmware, and software layers.\nTypes of Vulnerabilities: Mainly side-channel attacks exploit indirect information leaks like timing, power consumption, or electromagnetic emissions.\nSpectre:\nDefinition: Exploits speculative execution, allowing attackers to breach application boundaries and leak sensitive data. Discovery: Independently reported by Jann Horn and Paul Kocher\u0026rsquo;s team. Mechanism: Triggers deliberate incorrect predictions, leaving traces in micro-architectural structures like cache. Impact: Compromises system security by revealing sensitive information from other programs\u0026rsquo; memory. Meltdown:\nDefinition: Exploits out-of-order execution, breaching isolation between user applications and the operating system. Discovery: Independently reported by multiple teams including Jann Horn and Daniel Gruss\u0026rsquo;s team. Mechanism: Induces exceptions to access privileged memory, observing cached data via out-of-order execution. Impact: Allows malicious programs to access sensitive kernel memory, posing severe security risks. Comparison:\nSpectre vs Meltdown: Both exploit processor features but target different isolation boundaries—applications for Spectre and user/kernel space for Meltdown. Ease of Mitigation: Meltdown is easier to mitigate with techniques like KPTI, while Spectre mitigation can carry performance overheads. Mitigation Strategies:\nRetpoline: Prevents speculative execution by redirecting control flow without allowing speculative execution to occur. Compiler Barriers: Introduces memory and branch prediction barriers to control speculative execution. KPTI: Isolates kernel page tables to prevent information leakage from kernel memory. Microcode Updates: Enable stricter control over speculative execution at the hardware level. Challenges: Mitigation techniques address immediate risks but come with performance overheads and do not entirely eliminate vulnerabilities.\nExplanation : out-of-order vs speculative execution Out-of-Order Execution:\nOut-of-order execution is a technique used by modern microprocessors to improve performance by executing instructions in an order different from the sequential order specified by the program. Traditionally, instructions are fetched, decoded, and executed one after the other in the order they appear in the program. However, in out-of-order execution, the processor dynamically rearranges the order of execution based on various factors such as data dependencies and the availability of execution resources.\nHere\u0026rsquo;s how it works:\nThe processor fetches instructions from memory and places them in a queue known as the instruction queue. The instructions are decoded to determine their operation and operands. The processor then checks for data dependencies between instructions. If an instruction depends on the result of a previous instruction that has not yet been executed, the processor may delay the execution of the dependent instruction until the required data is available. Instructions that do not have dependencies or whose dependencies have been resolved are sent to the execution units for processing. As instructions are executed and completed, their results are stored in temporary storage locations known as registers. Once all dependencies are resolved and instructions are completed, the results are committed in the original program order, ensuring program correctness. Out-of-order execution helps improve processor utilization and performance by allowing the processor to work on multiple instructions simultaneously and by efficiently utilizing execution resources. However, it also introduces complexity into the processor design and can potentially lead to security vulnerabilities if not implemented carefully.\nSpeculative Execution:\nSpeculative execution is another performance optimization technique used by modern microprocessors to improve instruction throughput. In speculative execution, the processor predicts the outcome of certain branches in the program code and begins executing instructions based on those predictions before the branch outcome is known for certain.\nHere\u0026rsquo;s how it works:\nWhen the processor encounters a branch instruction (e.g., an if-else statement), it predicts which path the program will take (e.g., the if condition being true or false). Based on this prediction, the processor speculatively executes instructions from the predicted path, even before it is confirmed whether the prediction is correct. Meanwhile, the processor continues to fetch and execute subsequent instructions following the predicted path. Once the actual outcome of the branch is determined, if the prediction was correct, the speculatively executed instructions are allowed to proceed. However, if the prediction was incorrect, the speculatively executed instructions are discarded, and the processor resumes execution from the correct path. Speculative execution helps improve performance by reducing the impact of branch mispredictions, which would otherwise stall the processor pipeline and result in idle cycles. However, it also introduces potential security risks, as speculative execution can leave behind traces of its execution, even for instructions that are ultimately discarded. These traces can be exploited by attackers to infer sensitive information and carry out attacks like the Spectre vulnerability.\n","permalink":"http://localhost:1313/posts/brief-intro-to-hardware-attacks/","summary":"Introduction to Bluetooth 1. What is Bluetooth?\nWireless technology standard for short-distance data transfer. Operates in the ISM band from 2.402 GHz to 2.480 GHz. Named after King Harald Bluetooth, unifying Denmark and Norway. Widely adopted for its flexibility and ease of use. 2. Bluetooth Functionality:\nPairing Process:\nDiscovery: Devices broadcast presence. Pairing Request: Devices find each other. Authentication: Devices authenticate using a shared secret (link key). Piconets:\nCollection of connected devices (1 main, up to 7 clients).","title":"Brief Intro to Hardware Attacks"},{"content":"Introduction Unix 1970 release by Ken Thompson and Dennis Ritchie\nBerkeley Software Distribution 1977 (copy of unix)\nRichard stallman started the GNU project in 1983\nCreate a free Unix-like OS Linux was a personal project started in 1991 by Linus Torvalds\nCreate a free OS kernel Today there is more than 600 distributions of linux\nPhilosophy Principle Description Everything is a file All configuration files for the various services running on the Linux operating system are stored in one or more text files. Small, single-purpose programs Linux offers many different tools that we will work with, which can be combined to work together. Ability to chain programs together to perform complex tasks The integration and combination of different tools enable us to carry out many large and complex tasks, such as processing or filtering specific data results. Avoid captive user interfaces Linux is designed to work mainly with the shell (or terminal), which gives the user greater control over the operating system. Configuration data stored in a text file An example of such a file is the /etc/passwd file, which stores all users registered on the system. Components Component Description Bootloader A piece of code that runs to guide the booting process to start the operating system. OS Kernel The kernel is the main component of an operating system. It manages the resources for system\u0026rsquo;s I/O devices at the hardware level. Daemons A daemon is a background process that runs continuously on Unix-like operating systems such as Linux. They typically start automatically when the system boots up and continue to run until shutdown. Daemons operate silently, providing essential system functionality without direct user interface. OS Shell The operating system shell or the command language interpreter (also known as the command line) is the interface between the OS and the user. This interface allows the user to tell the OS what to do. The most commonly used shells are Bash, Tcsh/Csh, Ksh, Zsh, and Fish. Graphics server This provides a graphical sub-system (server) called \u0026ldquo;X\u0026rdquo; or \u0026ldquo;X-server\u0026rdquo; that allows graphical programs to run locally or remotely on the X-windowing system. Window Manager Also known as a graphical user interface (GUI). There are many options, including GNOME, KDE, MATE, Unity, and Cinnamon. A desktop environment usually has several applications, including file and web browsers. These allow the user to access and manage the essential and frequently accessed features and services of an operating system. Utilities Applications or utilities are programs that perform particular functions for the user or another program. Linux Architecture The Linux operating system can be broken down into layers:\nLayer Description Hardware Peripheral devices such as the system\u0026rsquo;s RAM, hard drive, CPU, and others. Kernel The core of the Linux operating system whose function is to virtualize and control common computer hardware resources like CPU, allocated memory, accessed data, and others. The kernel gives each process its own virtual resources and prevents/mitigates conflicts between different processes. Shell A command-line interpreter (CLI), also known as a shell that a user can enter commands into to execute the kernel\u0026rsquo;s functions. System Utility Makes available to the user all of the operating system\u0026rsquo;s functionality. Path Description / The top-level directory is the root filesystem and contains all of the files required to boot the operating system before other filesystems are mounted as well as the files required to boot the other filesystems. After boot, all of the other filesystems are mounted at standard mount points as subdirectories of the root. /bin Contains essential command binaries. /boot Consists of the static bootloader, kernel executable, and files required to boot the Linux OS. /dev Contains device files to facilitate access to every hardware device attached to the system. /etc Local system configuration files. Configuration files for installed applications may be saved here as well. /home Each user on the system has a subdirectory here for storage. /lib Shared library files that are required for system boot. /media External removable media devices such as USB drives are mounted here. /mnt Temporary mount point for regular filesystems. /opt Optional files such as third-party tools can be saved here. /root The home directory for the root user. /sbin This directory contains executables used for system administration (binary system files). /tmp The operating system and many programs use this directory to store temporary files. This directory is generally cleared upon system boot and may be deleted at other times without any warning. /usr Contains executables, libraries, man files, etc. /var This directory contains variable data files such as log files, email in-boxes, web application related files, cron files, and more. Filter content more:\nDisplay output one screen at a time. Press spacebar to move forward, \u0026lsquo;q\u0026rsquo; to quit. less:\nSimilar to more but allows scrolling backward and forward. Use arrow keys or page up/down for navigation. head:\nDisplay the first few lines of a file. Syntax: head [options] [file]. tail:\nDisplay the last few lines of a file. Useful for monitoring log files. Syntax: tail [options] [file]. sort:\nSort lines of text files. Options include alphabetical, numerical, and reverse sorting. grep:\nSearch for patterns in files. Supports regular expressions. Syntax: grep [options] [pattern] [file]. cut:\nExtract sections from each line of files. Useful for splitting lines by delimiter. Syntax: cut [options] [file]. tr:\nTranslate or delete characters. Syntax: tr [options] [set1] [set2]. column -t:\nFormat input into multiple columns. Useful for aligning output. Syntax: column -t [file]. awk:\nA powerful pattern scanning and processing language. Useful for data extraction and reporting. Syntax: awk '[pattern] {action}' [file]. sed:\nStream editor for filtering and transforming text. Supports regular expressions and substitution. Syntax: sed [options] '[script]' [file]. wc -l:\nCount the number of lines in a file. Syntax: wc -l [file]. \u0026mdash; EXAMPLES \u0026mdash;\nmore:\nExample: View the contents of a text file named \u0026ldquo;example.txt\u0026rdquo; using more: more example.txt less:\nExample: Scroll through the contents of a log file named \u0026ldquo;logfile.log\u0026rdquo; using less: less logfile.log head:\nExample: Display the first 10 lines of a file named \u0026ldquo;data.csv\u0026rdquo; using head: head data.csv tail:\nExample: Monitor the last 100 lines of a log file named \u0026ldquo;access.log\u0026rdquo; using tail: tail -n 100 access.log sort:\nExample: Sort the lines of a file named \u0026ldquo;unsorted.txt\u0026rdquo; alphabetically and display the result: sort unsorted.txt grep:\nExample: Search for lines containing the word \u0026ldquo;error\u0026rdquo; in a file named \u0026ldquo;log.txt\u0026rdquo; using grep: grep \u0026#34;error\u0026#34; log.txt cut:\nExample: Extract the second field (delimited by \u0026lsquo;:\u0026rsquo;) from a file named \u0026ldquo;data.txt\u0026rdquo;: cut -d \u0026#39;:\u0026#39; -f 2 data.txt tr:\nExample: Convert all lowercase letters to uppercase in a file named \u0026ldquo;text.txt\u0026rdquo;: tr \u0026#39;[:lower:]\u0026#39; \u0026#39;[:upper:]\u0026#39; \u0026lt; text.txt column -t:\nExample: Format the contents of a CSV file named \u0026ldquo;table.csv\u0026rdquo; into aligned columns: column -t -s \u0026#39;,\u0026#39; table.csv awk:\nExample: Print the first and third columns of a space-separated file named \u0026ldquo;data.txt\u0026rdquo;: awk \u0026#39;{print $1, $3}\u0026#39; data.txt sed:\nExample: Replace all occurrences of \u0026ldquo;old\u0026rdquo; with \u0026ldquo;new\u0026rdquo; in a file named \u0026ldquo;text.txt\u0026rdquo;: sed \u0026#39;s/old/new/g\u0026#39; text.txt wc -l:\nExample: Count the number of lines in a file named \u0026ldquo;poem.txt\u0026rdquo;: wc -l poem.txt Tips:\nCombine commands using pipes (|) for complex operations. Utilize redirection (\u0026gt;, \u0026gt;\u0026gt;, \u0026lt;) to manage input and output. Refer to man pages (man [command]) for detailed usage and options. Obtain information on a function man apropos \u0026ndash;help\nSystem information Command Description whoami Displays current username. id Returns users identity and groups in which the current user is hostname Sets or prints the name of current host system. uname Prints basic information about the operating system name and system hardware. pwd Returns working directory name. ifconfig The ifconfig utility is used to assign or to view an address to a network interface and/or configure network interface parameters. ip Ip is a utility to show or manipulate routing, network devices, interfaces and tunnels. netstat Shows network status. ss Another utility to investigate sockets. ps Shows process status. who Displays who is logged in. env Prints environment or sets and executes command. lsblk Lists block devices. lsusb Lists USB devices lsof Lists opened files. lspci Lists PCI devices. Find files and directories find: Search for files and directories in a directory hierarchy.\nSyntax: find [directory] [options] [expression].\nExample: Find all files with a .txt extension in the current directory and its subdirectories:\nfind / -type f -name *.conf -user root -size +20k -newermt 2020-03-03 2\u0026gt;/dev/null which:\nLocate the executable file associated with a given command in the user\u0026rsquo;s PATH.\nSyntax: which [command].\nExample: Find the location of the ls command:\nwhich ls locate:\nQuickly find files by name using a prebuilt database.\nSyntax: locate [pattern].\nExample: Locate all files and directories with \u0026ldquo;example\u0026rdquo; in their name:\nlocate example Tips:\nUse wildcards (*) and regular expressions for flexible searching. Combine commands with other utilities for more advanced search operations. Keep in mind that \u0026rsquo;locate\u0026rsquo; may not always return the most up-to-date results since it relies on a prebuilt database. Use \u0026lsquo;updatedb\u0026rsquo; to update the database if needed. File Descriptors and Redirections File Descriptor:\nIn Unix-like operating systems, everything is treated as a file, including input/output streams, devices, and regular files. File descriptors are integer identifiers used to represent these files within a process. There are three standard file descriptors: stdin (Standard Input): File descriptor 0. Default input source, typically keyboard input. stdout (Standard Output): File descriptor 1. Default output destination, typically terminal output. stderr (Standard Error): File descriptor 2. Default error output, used for error messages. Redirection:\nRedirection is a feature in Unix-like operating systems that allows changing where input comes from and where output goes to. Redirection operators: \u0026gt;: Redirects standard output to a file, overwriting the file if it exists. \u0026raquo;: Redirects standard output to a file, appending to the end of the file if it exists. \u0026lt;: Redirects standard input from a file. 2\u0026gt;: Redirects standard error to a file, overwriting the file if it exists. 2\u0026raquo;: Redirects standard error to a file, appending to the end of the file if it exists. \u0026amp;\u0026gt;: Redirects both standard output and standard error to a file, overwriting the file if it exists. \u0026amp;\u0026raquo;: Redirects both standard output and standard error to a file, appending to the end of the file if it exists. Regular expressions 1. Anchors:\n^: Start of a line. $: End of a line. 2. Quantifiers:\n*: Zero or more occurrences. +: One or more occurrences. ?: Zero or one occurrence. {n}: Exactly n occurrences. {n,}: At least n occurrences. {n,m}: Between n and m occurrences. 3. Character Classes:\n.: Any character except newline. [ ]: Any single character listed inside. [^ ]: Any single character not listed inside. \\d: Any digit (equivalent to [0-9]). \\D: Any non-digit. \\w: Any word character (alphanumeric + underscore). \\W: Any non-word character. \\s: Any whitespace character. \\S: Any non-whitespace character. 4. Grouping and Capturing:\n( ): Grouping. Captures matched text. (?: ): Grouping without capturing. \\n: Back-reference to captured group n. 5. Alternation:\n|: Alternation (OR operator). 6. Assertions:\n\\b: Word boundary. \\B: Not a word boundary. (?= ): Positive lookahead. (?! ): Negative lookahead. (?\u0026lt;= ): Positive lookbehind. (?\u0026lt;! ): Negative lookbehind. 7. Escaped Characters:\n\\: Escapes a special character. 8. Flags:\ng: Global match (find all matches). i: Case-insensitive match. m: Multiline match. Examples:\nMatch Email Addresses:\n\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b Extract Phone Numbers:\n\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4} Find HTML Tags:\n\u0026lt;[^\u0026gt;]*\u0026gt; Permissions management These permissions are shown utilizing the octal or Base 8 (0-7) numbering system. They are used to apply the read, write, and execute attributes to the contexts of User owner, Group owner, and Others on a file. These are represented as:\nAttribute Octal Value (r) - Read Octal value of 4 (w) - Write Octal value of 2 (x) - Execute Octal value of 1 chmod: Change file permissions. Example: chmod 777 \u0026lt;file\u0026gt; chown: Change file ownership. Example: sudo chown \u0026lt;new_user\u0026gt; \u0026lt;file\u0026gt; Example: sudo chown \u0026lt;new_user\u0026gt;:\u0026lt;new_group\u0026gt; \u0026lt;file\u0026gt; Special permissions SUID (Set User ID): When a file has the SUID bit set, it will be executed with the privileges of the file\u0026rsquo;s owner, rather than the user who is executing it. For example, if an executable file belongs to the user \u0026ldquo;root\u0026rdquo; and has the SUID bit set, when another user executes this file, it will be run with the privileges of the \u0026ldquo;root\u0026rdquo; user. This can be useful to allow ordinary users to execute programs with specific privileges without granting direct access to those privileges. SGID (Set Group ID): When a file has the SGID bit set, it is executed with the privileges of the file\u0026rsquo;s group owner, instead of the executing user\u0026rsquo;s primary group. This allows a file to be executed with the same privileges as the owning group, regardless of the user\u0026rsquo;s primary group. The letter s is used instead of an x. When executing such a program, the SUID/SGID of the file owner is used.\nSticky bits Files: For files, the sticky bit doesn\u0026rsquo;t have a specific meaning. Its usage is primarily reserved for directories.\nDirectories: - When the sticky bit is set on a directory, it means that only the file owner, the directory owner, or the root user can delete or rename files within that directory. - - This provides an additional layer of security in shared directories where multiple users have write permissions. Without the sticky bit, any user with write permissions could delete or rename any file in the directory. - - With the sticky bit enabled, only authorized users can modify or delete files, thus ensuring data integrity and protecting important files from accidental deletions.\nThe letter t or T is used instead of an x.\n\u0026ldquo;t\u0026rdquo;: Other users have permission to execute (access) the directory and its files. \u0026ldquo;T\u0026rdquo;: Other users do not have permission to execute (access) the directory, but the properties of the sticky bit for file deletion and renaming remain in place. User management Command Description sudo Execute command as a different user. su The su utility requests appropriate user credentials via PAM and switches to that user ID (the default user is the superuser). A shell is then executed. useradd Creates a new user or update default new user information. userdel Deletes a user account and related files. usermod Modifies a user account. addgroup Adds a group to the system. delgroup Removes a group from the system. passwd Changes user password. Package management Command Description dpkg The dpkg is a tool to install, build, remove, and manage Debian packages. The primary and more user-friendly front-end for dpkg is aptitude. apt Apt provides a high-level command-line interface for the package management system. aptitude Aptitude is an alternative to apt and is a high-level interface to the package manager. snap Install, configure, refresh, and remove snap packages. Snaps enable the secure distribution of the latest apps and utilities for the cloud, servers, desktops, and the internet of things. gem Gem is the front-end to RubyGems, the standard package manager for Ruby. pip Pip is a Python package installer recommended for installing Python packages that are not available in the Debian archive. It can work with version control repositories (currently only Git, Mercurial, and Bazaar repositories), logs output extensively, and prevents partial installs by downloading all requirements before starting installation. git Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals. Service and Process Management Types of Services:\nInternal services: Essential tasks required at system startup, often hardware-related. User-installed services: Includes server services, run in the background without user interaction, also known as daemons. Identifying Daemons:\nDaemons are recognized by the letter \u0026rsquo;d\u0026rsquo; at the end of their program names, e.g., sshd or systemd. Systemd:\nMost Linux distributions now use systemd as the init process, with PID 1. Responsible for orderly starting and stopping of services, monitoring other processes. Process Management:\nEach process has a unique Process ID (PID), visible under /proc/. Processes may have a Parent Process ID (PPID), indicating their relationship to other processes. Service Management Tools:\nsystemctl: Main command-line utility for managing services with systemd. update-rc.d: Tool for managing SysV init script links, offering similar functionality to systemctl for older init systems. We can use journalctl to view the log if a service do not start due to an error\nKill a process\nkill: Sends signals to processes, typically used to terminate them. Syntax: kill [options] PID.\npkill: Searches and kills processes based on their names or attributes. Syntax: pkill [options] pattern.\npgrep: Searches for processes based on their names or attributes and prints their PIDs. Syntax: pgrep [options] pattern.\nkillall: Terminates processes by their names. Syntax: killall [options] process_name.\nThe most commonly used signals are (signals are sent to the kernel):\nSignal Description 1 SIGHUP - This is sent to a process when the terminal that controls it is closed. 2 SIGINT - Sent when a user presses [Ctrl] + C in the controlling terminal to interrupt a process. 3 SIGQUIT - Sent when a user presses [Ctrl] + D to quit. 9 SIGKILL - Immediately kill a process with no clean-up operations. 15 SIGTERM - Program termination. 19 SIGSTOP - Stop the program. It cannot be handled anymore. 20 SIGTSTP - Sent when a user presses [Ctrl] + Z to request for a service to suspend. The user can handle it afterward. Background a Process:\nTo suspend a process and put it in the background, use [Ctrl + Z]. View background processes with jobs. Resume a suspended process in the background with bg. Alternatively, append \u0026amp; to a command to automatically run it in the background. Foreground a Process:\nView background processes with jobs. Bring a background process to the foreground with fg \u0026lt;ID\u0026gt;. Execute Multiple Commands:\nUse semicolon ; to separate commands, executing them sequentially. Double ampersand \u0026amp;\u0026amp; executes commands sequentially, stopping if an error occurs. Pipes | execute commands based on previous processes\u0026rsquo; results. Task scheduling Systemd:\nCreate a Timer:\nMake a directory for the timer script. Create a timer script with \u0026ldquo;Unit\u0026rdquo;, \u0026ldquo;Timer\u0026rdquo;, and \u0026ldquo;Install\u0026rdquo; options. Specify timing settings in the timer script. Create a Service:\nSet a description and specify the script\u0026rsquo;s full path in the service script. Define the target for installation. Reload Systemd:\nUse sudo systemctl daemon-reload to apply changes. Start the Timer \u0026amp; Service:\nManually start the service with sudo systemctl start \u0026lt;service_name\u0026gt;. Enable autostart with sudo systemctl enable \u0026lt;service_name\u0026gt;. Cron:\nCreate a Cron File: Use crontab -e to edit the cron table. Define tasks using time frames for minutes, hours, days of the month, months, and days of the week. Example Cron File:\n# System Update * */6 * * * /path/to/update_software.sh # Execute scripts 0 0 1 * * /path/to/scripts/run_scripts.sh # Cleanup DB 0 0 * * 0 /path/to/scripts/clean_database.sh # Backups 0 0 * * 7 /path/to/scripts/backup.sh Systemd vs. Cron:\nSystemd: Requires timer and service scripts; offers precise control over timing and execution. Cron: Uses cron table for task scheduling; simpler syntax but less flexible than systemd. Network Services SSH (Secure Shell):\nDescription: Securely transmit data and commands over a network. Check Status: systemctl status ssh Login Command: ssh username@hostname NFS (Network File System):\nDescription: NFS is a distributed file system protocol that allows users to access files and directories stored on remote systems over a network as if they were local.\nShare Creation: Edit the /etc/exports file to define which directories should be shared and specify access rights for users and systems. Each line in this file represents a shared directory and its associated settings.\nMounting a Share: To access a shared directory from a remote system, use the mount command followed by the IP address of the server and the path to the shared directory. For example, mount \u0026lt;server_ip\u0026gt;:/path/to/share /mount/point.\nPermissions Description rw Gives users and systems read and write permissions to the shared directory. ro Gives users and systems read-only access to the shared directory. no_root_squash Prevents the root user on the client from being restricted to the rights of a normal user. root_squash Restricts the rights of the root user on the client to the rights of a normal user. sync Synchronizes the transfer of data to ensure that changes are only transferred after they have been saved on the file system. async Transfers data asynchronously, which makes the transfer faster, but may cause inconsistencies in the file system if changes have not been fully committed. Example :\ncry0l1t3@htb:~$ mkdir nfs_sharing cry0l1t3@htb:~$ echo \u0026#39;/home/cry0l1t3/nfs_sharing hostname(rw,sync,no_root_squash)\u0026#39; \u0026gt;\u0026gt; /etc/exports cry0l1t3@htb:~$ mkdir ~/target_nfs cry0l1t3@htb:~$ mount 10.129.12.17:/home/john/dev_scripts ~/target_nfs Web Server (Apache \u0026amp; Python):\nDescription: Web servers like Apache and Python\u0026rsquo;s built-in HTTP server facilitate hosting websites and web applications over the internet. Apache is a widely-used web server with extensive features, while Python\u0026rsquo;s HTTP server is lightweight and suitable for simple tasks. Check Status: Use systemctl status apache2 to verify if Apache is running. This command provides information about the status of the Apache service. Configuration File: Apache\u0026rsquo;s main configuration file is located at /etc/apache2/apache2.conf. Here, you can customize settings such as directory access permissions, virtual hosts, and modules. Python Web Server: Python\u0026rsquo;s built-in HTTP server can be started using python3 -m http.server. This starts a simple web server serving files from the current directory. Python Web Server will be started on the TCP/8000 port. Python Web Server with Directory: To specify a directory for Python\u0026rsquo;s HTTP server, use python3 -m http.server --directory /path/to/directory. This serves files from the specified directory. VPN (Virtual Private Network - OpenVPN):\nDescription: VPNs provide secure communication over public networks by creating encrypted tunnels between the client and server, allowing users to access resources securely. Server Configuration: OpenVPN server configuration is done through the /etc/openvpn/server.conf file. Here, you can specify settings such as encryption, tunneling, and network routing. Client Connection: To connect to an OpenVPN server, use sudo openvpn --config client.ovpn, where \u0026ldquo;client.ovpn\u0026rdquo; is the configuration file provided by the server. This initiates the VPN connection from the client to the server. Working with web service cURL\nUsage: curl [URL] Functionality: Transfer files over various protocols like HTTP, HTTPS, FTP, SFTP, FTPS, or SCP. Importance: Facilitates remote website control and testing. Often pre-installed on Linux systems. wget\nUsage: wget [URL] Functionality: Download files from FTP or HTTP servers directly to the terminal. Difference from cURL: Content is downloaded and stored locally. Backup and Restore Rsync: Open-source tool for quick and secure backup of files and folders. Efficient for transferring large data over networks, transmitting only changes. Deja Dup: Graphical backup tool simplifying the backup process with a user-friendly interface. Uses Rsync as a backend and supports encryption. Duplicity: Comprehensive backup tool utilizing Rsync backend. Offers encryption options and supports storing backups on remote storage. Basic Rsync Commands\nBackup a Directory:\nrsync -av /path/to/source user@backup_server:/path/to/destination -z: Enable compression for faster transfers. --backup --backup-dir=/path/to/backup/folder --delete: Create incremental backups and delete files not present in the source. Restoring Data from Backup\nrsync -av user@backup_server:/path/to/backup/directory /path/to/destination Secure Transfer with Rsync\nrsync -avz -e ssh /path/to/source user@backup_server:/path/to/destination Utilizes SSH encryption for secure transfer. Auto-Synchronization with Cron and Rsync\nCreate Script: Create a script (e.g., RSYNC_Backup.sh) containing the rsync command. Ensure script execution permissions: chmod +x RSYNC_Backup.sh Configure Cron Job: Edit crontab to run the script at desired intervals. Example crontab entry: 0 * * * * /path/to/RSYNC_Backup.sh File system management ext2: Basic file system management. ext3: Journaling file system, improves reliability. ext4: Successor to ext3 with improved performance and features. XFS: High-performance file system suitable for large storage. Btrfs: Modern file system with features like snapshots and data integrity. NTFS: Compatibility with Windows systems. Components of Linux File System:\nInode Table: Contains metadata about files and directories. Regular Files: Common files stored in the root directory. Directories: Containers for collections of files. Symbolic Links: References to other files or directories. Disk Management Tools:\nfdisk: Create, delete, and manage partitions on drives. gpart: Another tool for partition management. GParted: GUI-based partition editor. Mounting File Systems:\nmount: Attach a drive to a directory. /etc/fstab: Defines default file systems mounted at boot time. mount command alone displays currently mounted file systems. Mounting Examples:\nsudo mount /dev/sdb1 /mnt/usb: Mount USB drive to directory. sudo umount /mnt/usb: Unmount a file system. Ensure permissions and no running processes before unmounting. Swap Space Management:\nUsed for memory management when physical memory is depleted. Created with mkswap and activated with swapon. Size depends on system memory and usage. Place on dedicated partition or file separate from the rest of the file system. Can be encrypted for security. Used for hibernation to save and restore system state. Example /etc/fstab Entry:\nThe /etc/fstab file contains information about all the file systems that are mounted on the system, including the options for automatic mounting at boot time and other mount options. To unmount a file system automatically at shutdown, we need to add the noauto option to the entry in the /etc/fstab file for that file system. This would look like, for example, the following:\n/dev/sda1 / ext4 defaults 0 0 /dev/sda2 /home ext4 defaults 0 0 /dev/sdb1 /mnt/usb ext4 rw,noauto,user 0 0 192.168.1.100:/nfs /mnt/nfs nfs defaults 0 0 Containerization Overview:\nContainerization is the process of packaging and running applications in isolated environments Key technologies: Docker, Docker Compose, Linux Containers. Container Security:\nContainers offer secure environments by isolating applications from the host system and other containers. Lightweight nature enhances security, making them harder to compromise compared to traditional virtual machines. Docker:\nOpen-source platform automating application deployment using containers. Utilizes layered filesystem and resource isolation for flexibility and portability. Docker Hub: Repository for Docker images, public and private areas available. Dockerfile: Contains instructions for building Docker images. Docker Build: Command for building Docker images. Docker Run: Command for starting containers from Docker images. Docker Management:\nDocker provides tools for listing, starting, stopping, and managing containers efficiently. Key commands: docker ps, docker stop/start/restart, docker rm/rmi, docker logs. Linux Containers (LXC):\nVirtualization technology allowing multiple isolated Linux systems on a single host. Uses features like cgroups and namespaces for resource isolation. Combined with Docker for a comprehensive containerization experience. LXC installation: Use package manager (e.g., apt-get). Managing LXC Containers:\nTasks include creating, configuring, starting, stopping, and monitoring containers. Command-line tools: lxc-ls, lxc-stop/start/restart, lxc-config, lxc-attach. Securing LXC:\nImplement measures like restricting access, limiting resources, isolating containers, enforcing access control, and keeping containers updated. Use cgroups to limit CPU and memory usage for containers. Leverage namespaces for isolation of processes, network interfaces, and file systems. Additional Tips:\nContainers are useful for testing software or systems with specific dependencies or configurations. Use containers to test exploits or malware safely in controlled environments. Always configure container security to prevent unauthorized access or malicious activities. Namespaces provide isolation for processes, network interfaces, and file systems, enhancing security. Network configuration Tools: ifconfig, ip command (preferred nowadays).\nCommands:\nifconfig: View and configure network interfaces (deprecated). ip addr: View and configure network interfaces (modern approach). Activation:\nsudo ifconfig eth0 up or sudo ip link set eth0 up: Activate network interface eth0. Assigning IP Address:\nsudo ifconfig eth0 \u0026lt;IP_Address\u0026gt; Setting Netmask:\nsudo ifconfig eth0 netmask \u0026lt;Netmask\u0026gt; Assigning Default Gateway:\nsudo route add default gw \u0026lt;Gateway_IP\u0026gt; eth0 Editing DNS Settings:\nFile: /etc/resolv.conf\nExample:\nnameserver 8.8.8.8 nameserver 8.8.4.4 Edit Command: sudo vim /etc/resolv.conf\nSaving Configuration Changes:\nFile: /etc/network/interfaces\nExample:\nauto eth0 iface eth0 inet static address 192.168.1.2 netmask 255.255.255.0 gateway 192.168.1.1 dns-nameservers 8.8.8.8 8.8.4.4 Edit Command: sudo vim /etc/network/interfaces\nRestart Networking Service: sudo systemctl restart networking\nAccess Control Discretionary Access Control (DAC):\nOverview: DAC is one of the most common access control models, allowing users to control access to their resources. It grants users discretion over who can access their files, folders, or resources, and what actions they can perform on them. User Control: Owners of resources decide who can access their resources and what permissions they have. Flexibility: Offers flexibility as users can grant permissions to other users or groups based on their preferences. Example: In a DAC system, a file owner can specify that only certain users or groups have permission to read or modify the file. Mandatory Access Control (MAC):\nOverview: MAC provides a more rigid access control mechanism than DAC. It is typically used in high-security environments such as government or military systems. Rule-Based: Access decisions are based on predefined rules or policies rather than the discretion of resource owners. Labeling: Resources and users are assigned security labels or levels, and access is granted based on these labels. Enforcement: The system enforces access controls based on the security labels, ensuring that users can only access resources with compatible labels. Example: In a MAC system, a user with a \u0026ldquo;Top Secret\u0026rdquo; clearance can only access files labeled as \u0026ldquo;Top Secret\u0026rdquo; or lower. Role-Based Access Control (RBAC):\nOverview: RBAC assigns permissions to users based on their roles within an organization or system. Roles: Users are assigned roles based on their job responsibilities, and each role is associated with a set of permissions. Simplicity: Simplifies access control management by organizing permissions based on roles rather than individual users. Granularity: Provides a finer level of access control compared to DAC but may not be as strict as MAC. Example: In an RBAC system, a network administrator role might have permissions to configure network devices, while a guest user role might only have permissions to access public resources. Network Access Control (NAC) vs. Basic Linux Permissions:\nBasic Linux Permissions: Control access to files and resources locally on a system based on user permissions.\nNAC Systems: Extend control to network access, offering several advantages:\nGranular Control: Define policies for network access based on user identity, device type, location, and security posture.\nDynamic Access: Adjust access privileges in real-time based on changes in the network environment.\nIntegration: Work with other security tools like IDS/IPS, firewalls, and SIEM systems to enhance security.\nCompliance Enforcement: Ensure compliance with organizational policies and regulatory requirements.\nVisibility: Provide visibility into devices and users accessing the network, aiding in monitoring and auditing.\nQuarantine and Remediation: Automatically quarantine compromised devices and initiate remediation actions in case of security incidents or policy violations.\nOverall: While Linux permissions control local access, NAC systems enhance security, compliance, and visibility across the entire network infrastructure.\nHardening\nSELinux AppArmor TCP wrappers Remote desktop protocols in Linux Introduction to Remote Desktop Protocols:\nRemote desktop protocols enable graphical remote access to systems. Used for troubleshooting, system upgrading, and remote administration. XServer (X11):\nXServer is part of the X Window System for Unix/Linux. Facilitates communication between graphical user interface and OS. Utilizes TCP/IP or Unix sockets for network transparency. Ports typically range from TCP/6001-6009. Can be accessed remotely without additional protocols on Unix/Linux systems. X11 communication is unencrypted, posing security risks. Vulnerabilities in XServer (e.g., CVE-2017-2624) can lead to unauthorized access. SSH tunneling can secure X11 communication by enabling X11 forwarding. XDMCP (X Display Manager Control Protocol):\nFacilitates remote X Window sessions on Unix/Linux machines. Communicates over UDP port 177. Vulnerable to man-in-the-middle attacks and should not be used in high-security environments. VNC (Virtual Network Computing):\nAllows remote desktop sharing based on the RFB protocol. Offers secure remote access and screen sharing. Servers traditionally listen on TCP port 5900. Common tools: TigerVNC, TightVNC, RealVNC, UltraVNC. SSH tunneling can enhance security when connecting via VNC. Setting Up TigerVNC Server:\nInstall necessary packages (e.g., xfce4, tigervnc-standalone-server). Create password for VNC connection. Configure xstartup and config files for session setup. Start VNC server and list sessions. Optionally, set up an SSH tunnel for secure connection. Connecting to VNC Server:\nConnect using appropriate VNC viewer (e.g., xtightvncviewer). Authenticate with VNC server password. Enjoy remote desktop access securely. Linux security Keeping System Updated Firewall Configuration Disable password login and root SSH access: PasswordAuthentication no PermitRootLogin no` Implement least privilege principle for user access. Use sudoers configuration for specific root commands. Utilize fail2ban for preventing brute-force attacks. Implement auditing tools like Lynis for system checks. Enable SELinux/AppArmor for granular access controls. Define policies to control user and application access. Remove unnecessary services and software. Enable NTP and ensure Syslog is running. Enforce strong passwords and password aging policies. TCP Wrappers:\nControl access to services based on hostname/IP: /etc/hosts.allow: Allow specific hosts/services. /etc/hosts.deny: Deny specific hosts/services. Important Considerations: - Order of rules in configuration files matters. - TCP wrappers complement firewall but don\u0026rsquo;t replace it.\nFirewall Setup 1. Introduction to Firewalls:\nPurpose: Control and monitor network traffic. Protects from unauthorized access and security threats. Linux offers built-in firewall capabilities. 2. History of Linux Firewalls:\nExample: iptables replaces ipchains and ipfwadm. Introduced in Linux 2.4 kernel in 2000. iptables became standard for Linux firewall solutions. 3. Iptables:\nProvides rules for filtering network traffic. Other solutions: nftables, UFW, FirewallD. iptables: Flexible command-line interface. 4. Components of iptables:\nTables: Organize firewall rules. Chains: Group rules for specific traffic. Rules: Define filtering criteria and actions. Matches: Criteria for filtering network traffic. Targets: Specify actions for matched packets. 5. Tables in iptables:\nFilter: IP addresses, ports, protocols. Nat: Modify source/destination IP addresses. Mangle: Modify header fields of packets. Raw: Special packet processing options. 6. Chains in iptables:\nBuilt-in: Pre-defined for different tasks. User-defined: Group rules based on criteria. 7. Rules and Targets:\nDefine criteria for filtering network traffic. Targets specify actions for matched packets. Common targets: ACCEPT, DROP, REJECT, LOG, SNAT, DNAT, MASQUERADE, REDIRECT, MARK. 8. Example Rule in iptables:\nAllow incoming TCP traffic on port 22 (SSH): sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT 9. Matches in iptables:\nSpecify criteria for applying firewall rules. Examples: Protocol, source/destination IP address, port, state, multiport, string, limit, conntrack, mark, MAC address, IP range. 10. Example iptables Rule with Matches:\nAllow incoming TCP traffic on port 80 (HTTP): sudo iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT System log 1. Introduction to System Logs:\nImportance: Monitoring and troubleshooting system activities. Provide insights into system behavior, application activity, and security events. Valuable for identifying security weaknesses and vulnerabilities. 2. Types of System Logs on Linux:\nKernel Logs System Logs Authentication Logs Application Logs Security Logs 3. Kernel Logs:\nLocation: /var/log/kern.log Information about the system\u0026rsquo;s kernel, hardware drivers, and kernel events. Helps identify vulnerabilities, system crashes, and suspicious activities. 4. System Logs:\nLocation: /var/log/syslog Records system-level events like service starts/stops, login attempts, and system reboots. Essential for detecting access attempts, abnormal activities, and system issues. 5. Authentication Logs:\nLocation: /var/log/auth.log Focuses on user authentication attempts (successful and failed). Crucial for identifying unauthorized access and security threats. 6. Application Logs:\nLocation: Varies based on the application (e.g., /var/log/apache2/error.log for Apache). Contains information about specific application activities. Helpful for identifying vulnerabilities, misconfigurations, and suspicious activities. 7. Access and Audit Logs:\nCritical for tracking user and process activities. Access logs record user/process actions like login attempts and file accesses. Audit logs record security-relevant events such as system file modifications. Essential for identifying security breaches and enforcing compliance. 8. Security Logs:\nLocation: Varies based on security application/tool (e.g., /var/log/fail2ban.log for Fail2ban). Records security-related events like failed login attempts, firewall activity, and system file changes. Important for detecting security issues and potential attack vectors. 9. Log Analysis Tools:\nUtilize log file viewers in Linux desktop environments. Command-line tools: tail, grep, sed for log analysis. Proper analysis helps troubleshoot system issues and detect security breaches. 10. Best Practices:\nConfigure log levels appropriately. Implement log rotation to manage log file sizes. Regularly review and analyze logs for security risks. Protect log files from unauthorized access. Solaris 1. Introduction to Solaris:\nUnix-based OS developed by Sun Microsystems, later acquired by Oracle. Known for robustness, scalability, and support for high-end hardware/software. Widely used in enterprise environments for mission-critical tasks like database management, cloud computing, and virtualization. 2. Solaris Features:\nBuilt-in hypervisor (Oracle VM Server for SPARC) for virtualization. High availability, fault tolerance, and system management features. Used in banking, finance, government sectors, data centers, and cloud environments. 3. Solaris vs Linux Distributions:\nSolaris: Proprietary, source code not publicly available. Linux: Open-source, commonly uses ZFS file system. Solaris: Uses Service Management Facility (SMF) for service management. 4. Solaris Directory Structure:\n/: Root directory /bin, /boot, /dev, /etc, /home, /kernel, /lib, /lost+found, /mnt, /opt, /proc, /sbin, /tmp, /usr, /var 5. Solaris Unique Features:\nHigh-end hardware/software support. Image Packaging System (IPS) for package management. Advanced security features like Role-Based Access Control (RBAC). 6. System Information:\nuname: Display basic system info in Linux. showrev: Display detailed system info in Solaris. 7. Installing Packages:\nUbuntu: Uses apt-get for package installation. Solaris: Uses pkgadd for package installation. 8. Permission Management:\nLinux: Uses chmod to change file permissions. Solaris: Similar command, find / -perm -4000 to find files with specific permissions. 9. NFS in Solaris:\nConfiguration using share command. Mounting NFS file systems using mount command. Configuration stored in /etc/dfs/dfstab file. 10. Process Mapping:\nUbuntu: Uses lsof to list files opened by a process. Solaris: Uses pfiles for similar functionality. 11. Executable Access:\nUbuntu: Uses strace for tracing system calls. Solaris: Uses truss for similar functionality. Tips systemctl list-units Displays the systemd units currently loaded and running on the system. Units can be services, filesystem mounts, devices, etc. systemctl list-unit-files Lists the systemd unit files available on the system. These unit files, usually located in directories such as /lib/systemd/system/ and /etc/systemd/system/, systemctl show ≤nom du service\u0026gt; Display all the information about an unit\nnetcat -z 127.0.0.1 1-65535 Scan all port from 1 to 65535 on the machine and show which one is active\nTo check battery capacity :\nupower -e Enumerate objects paths for devices upower -i /org/freedesktop/UPower/devices/battery_BAT0 Show information about object path\n","permalink":"http://localhost:1313/posts/linux-fundamentals/","summary":"Introduction Unix 1970 release by Ken Thompson and Dennis Ritchie\nBerkeley Software Distribution 1977 (copy of unix)\nRichard stallman started the GNU project in 1983\nCreate a free Unix-like OS Linux was a personal project started in 1991 by Linus Torvalds\nCreate a free OS kernel Today there is more than 600 distributions of linux\nPhilosophy Principle Description Everything is a file All configuration files for the various services running on the Linux operating system are stored in one or more text files.","title":"Linux fundamentals"},{"content":"What is macOS ? macOS is the operating system used on Apple computers. Widely used in daily home use, business management, graphical design, and arts. History Roundup\nOriginal start to OS X: Fall 2000, public beta named Kodiak, followed by Mac OS X (10.0) Cheetah and OS X (10.1) Puma. Notable releases: OS X (10.2) Jaguar, OS X (10.3) Panther, OS X (10.4) Tiger with Intel support, OS X (10.5) Leopard with Time Machine and Boot Camp, OS X (10.6) Snow Leopard. Introduction of iOS in 2007. OS X (10.7) Lion brought iOS features to macOS. Transition to yearly releases with OS X (10.9) Mavericks, followed by OS X (10.10) Yosemite, OS X (10.11) El Capitan, macOS (10.12) Sierra with Siri and Apple Pay. macOS (10.13) High Sierra introduced Apple File System (APFS). macOS (10.14) Mojave with Dark Mode and iOS app ports. macOS (10.15) Catalina split iTunes and introduced Sidecar. macOS 11 Big Sur introduced Apple Silicon support. macOS 12 Monterey brought Universal Control and AirPlay changes. macOS 13 Ventura introduced Stage Manager and Continuity Camera. OS \u0026amp; Architecture Info\nKernel: XNU (Mach kernel basis with BSD portions). OS Base: Darwin, a FreeBSD derivative open-sourced by Apple. Recent shift to support Apple Silicon while still supporting Intel processors. Core Components\nGUI: Aqua provides the graphical interface and visual theme. File Manager: Finder manages the desktop and files. Application Sandbox: Restricts app access outside necessary resources. Cocoa: Application management layer and API, used for built-in apps and development. macOS Domains Domain Description Local Domain Contains resources such as apps local to the computer and shared among all users. System Domain Contains system software installed by Apple. User Domain Contains resources specific to users who log in to the system, reflecting their home directory. Network Domain Contains resources like apps and documents shared among users of a local area network. Standard Directories Directory Description /Applications Contains applications installed for users, local, and system domains. /Users User directory containing user-specific applications, files, and resources. /Library Stores custom data files, caches, configurations, resources, and preferences for applications. /Network Contains files belonging to the network domain, listing computers in the local area network. /System Contains system resources required by macOS to run, installed by Apple. /bin Main storage point for binaries. /dev Maintains device-id files enabling the use of hardware devices. /etc Contains system and application configuration files. /sbin Contains essential administrative binaries. /tmp Used by the operating system to store temporary files. /usr Contains libraries and applications such as FTP, SSH, etc. /var Stores system log files, web server sources, backups, etc. /private Stores critical system files and caches required for operation. /opt Storage point for third-party applications or packages. /cores Contains Core Dumps stored by MacOS for troubleshooting. /home Subdirectories for each user for storage, including Desktop, Downloads, and Documents folders. File and Directory Permissions These permissions are shown utilizing the octal or Base 8 (0-7) numbering system. They are used to apply the read, write, and execute attributes to the contexts of User owner, Group owner, and Others on a file. These are represented as:\nAttribute Octal Value (r) - Read Octal value of 4 (w) - Write Octal value of 2 (x) - Execute Octal value of 1 chmod: Change file permissions. Example: chmod 777 \u0026lt;file\u0026gt; chown: Change file ownership. Example: sudo chown \u0026lt;new_user\u0026gt; \u0026lt;file\u0026gt; Example: sudo chown \u0026lt;new_user\u0026gt;:\u0026lt;new_group\u0026gt; \u0026lt;file\u0026gt; Networking ifconfig:\nView network interface configurations and statuses. Use ifconfig \u0026lt;interface\u0026gt; to focus on specific interfaces. lsof:\nCheck port states and associated files. Example: lsof -n -i4TCP -P to view applications bound to TCP/IPv4 addresses. networksetup:\nCommand-line tool to check and configure networking preferences. Command Description networksetup -listallnetworkservices Displays a list of all the network services (device) on the computer’s hardware. This will print out the logical name of the device. (ex. Wi-Fi) networksetup -listnetworkserviceorder This will print out the network services running and the order in which they are queried for connection. A service at the beginning of the list is checked first. networksetup -getinfo \u0026lt;devicename\u0026gt; Get basic info about a networkservice (device) such as the IP address assigned, subnet mask, gateway, and Mac-Address. networksetup -getcurrentlocation Prints out the currently set network location. networksetup -setmanual \u0026lt;networkservice\u0026gt; \u0026lt;ip\u0026gt; \u0026lt;netmask\u0026gt; \u0026lt;Gateway\u0026gt; This will manually configure the ip address, network mask, and gateway for the device specified. Tips \u0026amp; Tricks NetworkQuality:\nCheck interface network quality using networkQuality -I \u0026lt;interface\u0026gt;. Find Wi-Fi Password:\nUse security find-generic-password -wa \u0026lt;SSID\u0026gt; to retrieve a Wi-Fi password. Bonjour Zero-configuration Networking: Enables automatic discovery of devices and services on a network. Utilizes mDNSResponder protocol in macOS. Ensure network security and segmentation to prevent unauthorized access. Tips To show hidden files :\nCommand + Shift + .\n","permalink":"http://localhost:1313/posts/macos-fundamentals/","summary":"What is macOS ? macOS is the operating system used on Apple computers. Widely used in daily home use, business management, graphical design, and arts. History Roundup\nOriginal start to OS X: Fall 2000, public beta named Kodiak, followed by Mac OS X (10.0) Cheetah and OS X (10.1) Puma. Notable releases: OS X (10.2) Jaguar, OS X (10.3) Panther, OS X (10.4) Tiger with Intel support, OS X (10.5) Leopard with Time Machine and Boot Camp, OS X (10.","title":"MacOS fundamentals"},{"content":"Network Terms WAN (Wide Area Network):\nDefinition: The Internet; a large network connecting multiple LANs. Identification: WAN-specific routing protocols like BGP and non-RFC 1918 IP schemas. LAN (Local Area Network):\nDefinition: Internal networks (e.g., home or office). IP Addressing: Typically RFC 1918 addresses. WLAN (Wireless Local Area Network):\nDefinition: Wireless variant of LAN, enabling Wi-Fi access. Security: Mainly a security designation; no fundamental difference from LAN. VPN (Virtual Private Network):\nGoal: Allows users to feel connected to a different network securely. Types: Site-to-Site, Remote Access, SSL VPN. VPN Types Site-To-Site VPN:\nDevices Involved: Routers or Firewalls. Function: Shares entire network ranges between client and server. Remote Access (client to site) VPN:\nFunction: Client\u0026rsquo;s computer creates a virtual interface to the client\u0026rsquo;s network. Considerations: Split-Tunnel VPNs for selective routing. SSL VPN:\nFunction: VPN within a web browser, streaming applications or desktop sessions. Example: HackTheBox Pwnbox. Book Terms GAN (Global Area Network):\nDefinition: Global network like the Internet; used by international companies. Infrastructure: Utilizes WAN infrastructure and international connections. MAN (Metropolitan Area Network):\nDefinition: Regional network connecting multiple LANs in proximity. Infrastructure: Utilizes high-performance routers and fiber connections. PAN / WPAN (Personal Area Network / Wireless Personal Area Network):\nPAN Definition: Ad hoc network connecting devices via cable. WPAN Definition: Wireless variant using Bluetooth or Wireless USB technologies. IoT Application: Used for smart homes and home automation with protocols like ZigBee. Network topologies Overview Definition: A network topology refers to the arrangement and connections of devices in a network, determining communication paths. Physical Topology: Concerns the physical layout of devices and cabling. Logical Topology: Concerns how data is transmitted across the network regardless of physical connections. Components Connections: Wired: Coaxial, Glass fiber, Twisted-pair cabling, etc. Wireless: Wi-Fi, Cellular, Satellite, etc. Nodes: Devices facilitating communication: Repeaters, Hubs, Bridges, Switches, Routers/Modems, Gateways, Firewalls. NICs (Network Interface Controllers): Enable communication between nodes. Basic Topologies Point-to-Point:\nDirect connection between two hosts; basic telephony model. Bus:\nAll hosts connected via shared transmission medium; one host can send at a time. Star:\nCentral network component (router, hub, switch) connects to each host individually. Ring:\nPhysical: Each node connects to the ring with separate cables for incoming and outgoing signals. Logical: Stations access the ring sequentially using a token. Mesh:\nFully Meshed: Every node is connected to every other node; high reliability and bandwidth. Partially Meshed: Nodes connected with varying degrees of connectivity. Tree:\nExtended star topology; useful for larger networks or combining multiple topologies. Hybrid:\nCombination of two or more basic topologies; resulting network is non-standard. Daisy Chain:\nNodes connected sequentially; often found in automation technology. Proxies Cheat Sheet Overview Definition: A proxy acts as a mediator between client and server, inspecting and potentially modifying traffic. Misconceptions: Often confused with VPNs; proxies typically operate at Layer 7 of the OSI Model. Types of Proxies Dedicated Proxy / Forward Proxy:\nForward proxies filter outgoing requests from clients. Example: Corporate networks use forward proxies for security, filtering, and monitoring. Reverse Proxy:\nListens for incoming requests and forwards them to backend servers. Example: Cloudflare serves as a reverse proxy to protect against DDoS attacks. (Non-) Transparent Proxy:\nTransparent Proxy: Operates without the client\u0026rsquo;s knowledge, intercepting and substituting requests. Non-Transparent Proxy: Requires client and software to be configured to use it explicitly. Use Cases Security Professionals: Utilize proxies for testing, analyzing, and intercepting network traffic (e.g., Burp Suite).\nWeb Developers: Employ proxies like Cloudflare or ModSecurity for filtering and blocking malicious traffic.\nAverage Users: Often mistakenly refer to VPNs as proxies for location obfuscation and accessing region-restricted content.\nLaw Enforcement: May associate proxies with illegal activities due to their potential for anonymity and traffic manipulation.\nExamples Forward Proxy Example:\nUsage: Filtering outbound requests in a corporate network. Tool: Burp Suite, commonly used for HTTP request forwarding and analysis. Reverse Proxy Example:\nUsage: Protecting servers from DDoS attacks. Tool: Cloudflare, acting as a reverse proxy to filter and distribute incoming traffic. Transparent Proxy Example:\nUsage: Intercepting and substituting client requests without their knowledge. Implementation: Often employed in corporate environments for security and monitoring purposes. ![[Pasted image 20240407163924.png]]\nOSI - TCP/IP models ![[HTB/images/net_models_pdu2.png]]\nPacket Transfers Protocol Data Unit (PDU):\nDefinition: Data format exchanged between layers in a layered system. Encapsulation:\nProcess: Each layer adds a header to the PDU from the upper layer, controlling and identifying the packet. Transmission Process:\nData is processed layer by layer, with each layer performing its assigned functions. Header and data together form the PDU for the next layer, continuing until data reaches the receiver. OSI Physical Layer (Layer 1): Function: Handles transmission techniques, such as electrical signals, optical signals, or electromagnetic waves. Data Link Layer (Layer 2): Function: Enables reliable and error-free transmissions by dividing bitstreams into blocks or frames. Network Layer (Layer 3): Function: Establishes connections in circuit-switched networks and forwards data packets in packet-switched networks. Transport Layer (Layer 4): Function: Provides end-to-end control of transferred data, detecting and avoiding congestion situations and segmenting data streams. Session Layer (Layer 5): Function: Controls logical connections between systems, preventing connection breakdowns or other issues. Presentation Layer (Layer 6): Function: Transfers system-dependent data presentations into a form independent of the application. Application Layer (Layer 7): Function: Controls input and output of data, providing application functions among other tasks. TCP/IP Link Layer (Layer 1): Function: Places TCP/IP packets on the network medium and receives corresponding packets, independent of network access method or frame format. Internet Layer (Layer 2): Function: Handles host addressing, packaging, and routing functions to ensure data packet delivery to the intended destination. Transport Layer (Layer 3): Function: Provides TCP session and UDP datagram services for applications, controlling data transfer and ensuring connection between data stream and application. Application Layer (Layer 4): Function: Allows applications to access services from other layers and defines protocols for data exchange between applications. CIDR Notation Classless Inter-Domain Routing (CIDR): Offers a flexible method of IP address representation. Format: Combines the IP address with a slash followed by a number indicating the number of network prefix bits (e.g., 192.168.10.39/24). MAC Addresses MAC Address: A 48-bit (6 octets) unique identifier assigned to each network interface card (NIC) for communication on a network. Representation: Expressed in hexadecimal format, commonly separated by colons, hyphens, or periods. Standards: Used in Ethernet (IEEE 802.3), Bluetooth (IEEE 802.15), and WLAN (IEEE 802.11) networks. Structure Format: Consists of 6 pairs of hexadecimal digits (octets). Organization: First 3 octets: Organization Unique Identifier (OUI) assigned to manufacturers by IEEE. Last 3 octets: Individual Address Part, assigned by manufacturers. Types of MAC Addresses Unicast: Sent to a specific host, identified by the last bit of the first octet (0). Multicast: Sent to a group of hosts, identified by the last bit of the first octet (1). Broadcast: Sent to all hosts on the network, identified by all bits set to 1. Reserved MAC Address Ranges Local Range: Definition: This range is reserved for local use within a network and is not intended to be globally unique. Devices within a local network might generate MAC addresses within this range for internal communication. Examples: 02:00:00:00:00:00: Often used for testing and debugging purposes. 06:00:00:00:00:00: Reserved for network interface cards with multicast capabilities. 0A:00:00:00:00:00: Used for Virtual Local Area Network (VLAN) tagging. 0E:00:00:00:00:00: Reserved for future use. These reserved MAC address ranges help prevent conflicts and ensure that certain types of MAC addresses are not inadvertently assigned to devices on a network. They are primarily used for special networking functionalities and should not be used for regular network devices.\nMAC Address Manipulation MAC Spoofing: Altering a device\u0026rsquo;s MAC address to impersonate another device, often used for unauthorized access. MAC Flooding: Sending numerous packets with different MAC addresses to overwhelm a network switch. MAC Filtering: Restricting network access based on approved MAC addresses, potentially exploitable with spoofed addresses. Address Resolution Protocol (ARP) Purpose: Maps IP addresses to MAC addresses for communication on a LAN. Process: ARP Request: Device broadcasts request for MAC address corresponding to a given IP address. ARP Reply: Device with matching IP address responds with its MAC address. Vulnerabilities: Can be exploited for attacks like ARP Spoofing, leading to interception or manipulation of network traffic. ARP Spoofing Definition: Sending falsified ARP messages to associate attacker\u0026rsquo;s MAC address with target\u0026rsquo;s IP address. Goal: Intercepting traffic intended for the target, facilitating various malicious activities. Mitigation: Implement secure network protocols, firewalls, and intrusion detection systems to protect against ARP spoofing attacks. IPv6 Addresses Basic Information:\nIPv6 is the successor of IPv4, with a 128-bit address space. IPv6 addresses are represented in hexadecimal format. IPv6 follows the end-to-end principle, providing globally accessible IP addresses without the need for NAT. Address Types:\nUnicast: Addresses for a single interface. Anycast: Addresses for multiple interfaces, with only one receiving the packet. Multicast: Addresses for multiple interfaces, where all receive the same packet. Broadcast: Does not exist in IPv6 and is replaced by multicast addresses. Hexadecimal System:\nHexadecimal system (hex) is used to represent IPv6 addresses. Hexadecimal characters range from 0 to F, corresponding to binary groups. Simplifies representation compared to binary, making it more readable. Representation:\nIPv6 addresses are divided into 8 blocks of 16 bits each, separated by colons (:). Leading zeros in each block are omitted. Consecutive blocks of zeros can be represented as \u0026ldquo;::\u0026rdquo; once, starting from the left. Example:\nFull IPv6: fe80:0000:0000:0000:dd80:b1a9:6687:2d3b/64 Short IPv6: fe80::dd80:b1a9:6687:2d3b/64 Address Structure:\nConsists of two parts: Network Prefix and Interface Identifier (Suffix). Network Prefix identifies the network or subnet. Interface Identifier is formed from the MAC address and converted to a 64-bit address. Typical prefix lengths include /32, /48, /56, and /64. RFC 5952 Notation:\nAll alphabetical characters are lowercase. Leading zeros in each block are omitted. Consecutive blocks of 4 zeros can be shortened with \u0026ldquo;::\u0026rdquo; once from the left. Advantages of IPv6:\nLarger address space. Address self-configuration (SLAAC). Multiple IPv6 addresses per interface. Faster routing. Mandatory support for IPsec. Data packages up to 4 GB. Transition Mechanisms:\nDual Stack: Simultaneous availability of both IPv4 and IPv6. Tunneling: Encapsulation of IPv6 packets within IPv4 packets for transmission over IPv4 networks. Network Key Terminology Protocol Acronym Description Wired Equivalent Privacy WEP WEP is a type of security protocol that was commonly used to secure wireless networks. Secure Shell SSH A secure network protocol used to log into and execute commands on a remote system File Transfer Protocol FTP A network protocol used to transfer files from one system to another Simple Mail Transfer Protocol SMTP A protocol used to send and receive emails Hypertext Transfer Protocol HTTP A client-server protocol used to send and receive data over the internet Server Message Block SMB A protocol used to share files, printers, and other resources in a network Network File System NFS A protocol used to access files over a network Simple Network Management Protocol SNMP A protocol used to manage network devices Wi-Fi Protected Access WPA WPA is a wireless security protocol that uses a password to protect wireless networks from unauthorized access. Temporal Key Integrity Protocol TKIP TKIP is also a security protocol used in wireless networks but less secure. Network Time Protocol NTP It is used to synchronize the timing of computers on a network. Virtual Local Area Network VLAN It is a way to segment a network into multiple logical networks. VLAN Trunking Protocol VTP VTP is a Layer 2 protocol that is used to establish and maintain a virtual LAN (VLAN) spanning multiple switches. Routing Information Protocol RIP RIP is a distance-vector routing protocol used in local area networks (LANs) and wide area networks (WANs). Open Shortest Path First OSPF It is an interior gateway protocol (IGP) for routing traffic within a single Autonomous System (AS) in an Internet Protocol (IP) network. Interior Gateway Routing Protocol IGRP IGRP is a Cisco proprietary interior gateway protocol designed for routing within autonomous systems. Enhanced Interior Gateway Routing Protocol EIGRP It is an advanced distance-vector routing protocol that is used to route IP traffic within a network. Pretty Good Privacy PGP PGP is an encryption program that is used to secure emails, files, and other types of data. Network News Transfer Protocol NNTP NNTP is a protocol used for distributing and retrieving messages in newsgroups across the internet. Cisco Discovery Protocol CDP It is a proprietary protocol developed by Cisco Systems that allows network administrators to discover and manage Cisco devices connected to the network. Hot Standby Router Protocol HSRP HSRP is a protocol used in Cisco routers to provide redundancy in the event of a router or other network device failure. Virtual Router Redundancy Protocol VRRP It is a protocol used to provide automatic assignment of available Internet Protocol (IP) routers to participating hosts. Spanning Tree Protocol STP STP is a network protocol used to ensure a loop-free topology in Layer 2 Ethernet networks. Terminal Access Controller Access-Control System TACACS TACACS is a protocol that provides centralized authentication, authorization, and accounting for network access. Session Initiation Protocol SIP It is a signaling protocol used for establishing and terminating real-time voice, video and multimedia sessions over an IP network. Voice Over IP VOIP VOIP is a technology that allows for telephone calls to be made over the internet. Extensible Authentication Protocol EAP EAP is a framework for authentication that supports multiple authentication methods, such as passwords, digital certificates, one-time passwords, and public-key authentication. Lightweight Extensible Authentication Protocol LEAP LEAP is a proprietary wireless authentication protocol developed by Cisco Systems. It is based on the Extensible Authentication Protocol (EAP) used in the Point-to-Point Protocol (PPP). Protected Extensible Authentication Protocol PEAP PEAP is a security protocol that provides an encrypted tunnel for wireless networks and other types of networks. Systems Management Server SMS SMS is a systems management solution that helps organizations manage their networks, systems, and mobile devices. Microsoft Baseline Security Analyzer MBSA It is a free security tool from Microsoft that is used to detect potential security vulnerabilities in Windows computers, networks, and systems. Supervisory Control and Data Acquisition SCADA It is a type of industrial control system that is used to monitor and control industrial processes, such as those in manufacturing, power generation, and water and waste treatment. Virtual Private Network VPN VPN is a technology that allows users to create a secure, encrypted connection to another network over the internet. Internet Protocol Security IPsec IPsec is a protocol used to provide secure, encrypted communication over a network. It is commonly used in VPNs, or Virtual Private Networks, to create a secure tunnel between two devices. Point-to-Point Tunneling Protocol PPTP It is a protocol used to create a secure, encrypted tunnel for remote access. Network Address Translation NAT NAT is a technology that allows multiple devices on a private network to connect to the internet using a single public IP address. NAT works by translating the private IP addresses of devices on the network into a single public IP address, which is then used to connect to the internet. Carriage Return Line Feed CRLF Combines two control characters to indicate the end of a line and a start of a new one for certain text file formats. Asynchronous JavaScript and XML AJAX Web development technique that allows creating dynamic web pages using JavaScript and XML/JSON. Internet Server Application Programming Interface ISAPI Allows to create performance-oriented web extensions for web servers using a set of APIs. Uniform Resource Identifier URI It is a syntax used to identify a resource on the Internet. Uniform Resource Locator URL Subset of URI that identifies a web page or another resource on the Internet, including the protocol and the domain name. Internet Key Exchange IKE IKE is a protocol used to set up a secure connection between two computers. It is used in virtual private networks (VPNs) to provide authentication and encryption for data transmission, protecting the data from outside eavesdropping and tampering. Generic Routing Encapsulation GRE This protocol is used to encapsulate the data being transmitted within the VPN tunnel. Remote Shell RSH It is a program under Unix that allows executing commands and programs on a remote computer. Common protocols Transmission Control Protocol (TCP)\nDescription: TCP is a connection-oriented protocol used for reliable data transmission. It establishes a virtual connection between two devices before data transmission using a Three-Way Handshake. This connection persists until data transfer is complete, ensuring reliable communication. Key Features: Reliable but slower due to overhead in connection establishment and maintenance. Protocol Acronym Port Description Telnet Telnet 23 Remote login service Secure Shell SSH 22 Secure remote login service Simple Network Management Protocol SNMP 161-162 Manage network devices Hyper Text Transfer Protocol HTTP 80 Used to transfer webpages Hyper Text Transfer Protocol Secure HTTPS 443 Used to transfer secure webpages Domain Name System DNS 53 Lookup domain names File Transfer Protocol FTP 20-21 Used to transfer files Trivial File Transfer Protocol TFTP 69 Used to transfer files Network Time Protocol NTP 123 Synchronize computer clocks Simple Mail Transfer Protocol SMTP 25 Used for email transfer Post Office Protocol POP3 110 Used to retrieve emails Internet Message Access Protocol IMAP 143 Used to access emails Server Message Block SMB 445 Used to transfer files Network File System NFS 111, 2049 Used to mount remote systems Bootstrap Protocol BOOTP 67, 68 Used to bootstrap computers Kerberos Kerberos 88 Used for authentication and authorization Lightweight Directory Access Protocol LDAP 389 Used for directory services Remote Authentication Dial-In User Service RADIUS 1812, 1813 Used for authentication and authorization Dynamic Host Configuration Protocol DHCP 67, 68 Used to configure IP addresses Remote Desktop Protocol RDP 3389 Used for remote desktop access Network News Transfer Protocol NNTP 119 Used to access newsgroups Remote Procedure Call RPC 135, 137-139 Used to call remote procedures Identification Protocol Ident 113 Used to identify user processes Internet Control Message Protocol ICMP 0-255 Used to troubleshoot network issues Internet Group Management Protocol IGMP 0-255 Used for multicasting Oracle DB (Default/Alternative) Listener oracle-tns 1521/1526 The Oracle database default/alternative listener is a service that runs on the database host and receives requests from Oracle clients. Ingres Lock ingreslock 1524 Ingres database is commonly used for large commercial applications and as a backdoor that can execute commands remotely via RPC. Squid Web Proxy http-proxy 3128 Squid web proxy is a caching and forwarding HTTP web proxy used to speed up a web server by caching repeated requests. Secure Copy Protocol SCP 22 Securely copy files between systems Session Initiation Protocol SIP 5060 Used for VoIP sessions Simple Object Access Protocol SOAP 80, 443 Used for web services Secure Socket Layer SSL 443 Securely transfer files TCP Wrappers TCPW 113 Used for access control Internet Security Association and Key Management Protocol ISAKMP 500 Used for VPN connections Microsoft SQL Server ms-sql-s 1433 Used for client connections to the Microsoft SQL Server. Kerberized Internet Negotiation of Keys KINK 892 Used for authentication and authorization Open Shortest Path First OSPF 89 Used for routing Point-to-Point Tunneling Protocol PPTP 1723 Is used to create VPNs Remote Execution REXEC 512 This protocol is used to execute commands on remote computers and send the output of commands back to the local computer. Remote Login RLOGIN 513 This protocol starts an interactive shell session on a remote computer. X Window System X11 6000 It is a computer software system and network protocol that provides a graphical user interface (GUI) for networked computers. Relational Database Management System DB2 50000 RDBMS is designed to store, retrieve and manage data in a structured format for enterprise applications such as financial systems, customer relationship management (CRM) systems. User Datagram Protocol (UDP)\nDescription: UDP is a connectionless protocol used for faster data transmission. It does not establish a connection before data transmission, making it faster but less reliable compared to TCP. Key Features: Faster transmission but lacks reliability as it doesn\u0026rsquo;t ensure data delivery. Protocol Acronym Port Description Domain Name System DNS 53 It is a protocol to resolve domain names to IP addresses. Trivial File Transfer Protocol TFTP 69 It is used to transfer files between systems. Network Time Protocol NTP 123 It synchronizes computer clocks in a network. Simple Network Management Protocol SNMP 161 It monitors and manages network devices remotely. Routing Information Protocol RIP 520 It is used to exchange routing information between routers. Internet Key Exchange IKE 500 Internet Key Exchange Bootstrap Protocol BOOTP 68 It is used to bootstrap hosts in a network. Dynamic Host Configuration Protocol DHCP 67 It is used to assign IP addresses to devices in a network dynamically. Telnet TELNET 23 It is a text-based remote access communication protocol. MySQL MySQL 3306 It is an open-source database management system. Terminal Server TS 3389 It is a remote access protocol used for Microsoft Windows Terminal Services by default. NetBIOS Name netbios-ns 137 It is used in Windows operating systems to resolve NetBIOS names to IP addresses on a LAN. Microsoft SQL Server ms-sql-m 1434 Used for the Microsoft SQL Server Browser service. Universal Plug and Play UPnP 1900 It is a protocol for devices to discover each other on the network and communicate. PostgreSQL PGSQL 5432 It is an object-relational database management system. Virtual Network Computing VNC 5900 It is a graphical desktop sharing system. X Window System X11 6000-6063 It is a computer software system and network protocol that provides GUI on Unix-like systems. Syslog SYSLOG 514 It is a standard protocol to collect and store log messages on a computer system. Internet Relay Chat IRC 194 It is a real-time Internet text messaging (chat) or synchronous communication protocol. OpenPGP OpenPGP 11371 It is a protocol for encrypting and signing data and communications. Internet Protocol Security IPsec 500 IPsec is also a protocol that provides secure, encrypted communication. It is commonly used in VPNs to create a secure tunnel between two devices. Internet Key Exchange IKE 11371 It is a protocol for encrypting and signing data and communications. X Display Manager Control Protocol XDMCP 177 XDMCP is a network protocol that allows a user to remotely log in to a computer running the X11. Internet Control Message Protocol (ICMP)\nDescription: ICMP is used for error reporting and status information between devices on the Internet. It includes request and message types for various network troubleshooting and management tasks.\nRequest Types:\nRequest Type Description Echo Request This message tests whether a device is reachable on the network. When a device sends an echo request, it expects to receive an echo reply message. For example, the tools tracert (Windows) or traceroute (Linux) always send ICMP echo requests. Timestamp Request This message determines the time on a remote device. Address Mask Request This message is used to request the subnet mask of a device. Message Types: Message Type Description Echo reply This message is sent in response to an echo request message. Destination unreachable This message is sent when a device cannot deliver a packet to its destination. Redirect A router sends this message to inform a device that it should send its packets to a different router. time exceeded This message is sent when a packet has taken too long to reach its destination. Parameter problem This message is sent when there is a problem with a packet\u0026rsquo;s header. Source quench This message is sent when a device receives packets too quickly and cannot keep up. It is used to slow down the flow of packets. TTL: Time-to-Live field in ICMP packet header limits packet lifetime, preventing indefinite circulation. It also helps determine packet hops and approximate distance to destination. Each time a packet passes through a router, the router decrements the TTL value by 1. When the TTL value reaches 0, the router discards the packet and sends an ICMP Time Exceeded message back to the sender. Voice over Internet Protocol (VoIP)\nDescription: VoIP enables voice and multimedia communication over the internet, replacing traditional phone lines. It uses protocols like SIP and H.323 for session initiation, maintenance, and termination. Protocols: SIP (Session Initiation Protocol), H.323. Common Ports: TCP/5060, TCP/5061 (SIP). Information Disclosure: SIP OPTIONS request can enumerate users for potential attacks. Discovery of SEPxxxx.cnf file for Cisco Unified IP Phone configurations. Most common SIP requests and methods :\nMethod Description INVITE Initiates a session or invites another endpoint to participate. ACK Confirms the receipt of an INVITE request. BYE Terminate a session. CANCEL Cancels a pending INVITE request. REGISTER Registers a SIP user agent (UA) with a SIP server. OPTIONS Requests information about the capabilities of a SIP server or user agent, such as the types of media it supports. Wireless Networks Fundamentals Definition: Wireless networks facilitate data transmission between devices without physical connections. Technology: Utilizes radio frequency (RF) signals for communication. WiFi Connection Protocol (IEEE 802.11) Association Process: Association Request: Device initiates connection request to Wireless Access Point (WAP). The connection request frame contains various fields of information, including the following but not limited to:\nMAC address A unique identifier for the device\u0026rsquo;s wireless adapter. SSID The network name, also known as the Service Set Identifier of the WiFi network. Supported data rates A list of the data rates the device can communicate. Supported channels A list of the channels (frequencies) on which the device can communicate. Supported security protocols A list of the security protocols that the device is capable of using, such as WPA2/WPA3. Association Response: WAP responds with parameters including challenge string. Challenge-Response: Device computes response to challenge using predetermined algorithm. Authentication: WAP verifies response, grants or denies access based on authentication outcome. Some packets can get lost, so the so-called CRC checksum has been integrated. Cyclic Redundancy Check (CRC) is an error-detection mechanism used in the WEP protocol to protect against data corruption in wireless communications\nWhen the destination device receives the packet, the CRC value is recalculated and compared to the original value. If the values match, the data has been transmitted successfully without any errors. However, if the values do not match, the data has been corrupted and needs to be retransmitted.\nBecause the CRC value is calculated using the plaintext data in the packet rather than the encrypted data. We can use the CRC to determine the plaintext data in the packet, even if the data is encrypted.\nSecurity Features Overview Encryption: Critical for safeguarding data confidentiality during transmission. WEP WPA2 WP3 Access Control: Regulates network access, often implemented via passwords or MAC address filtering. Firewall: Acts as a barrier against unauthorized access and malicious traffic. Encryption Protocols WEP (Wired Equivalent Privacy):\nAlgorithm: Utilizes RC4 cipher. Key Length: Available in WEP-40/WEP-64 (40-bit) and WEP-104 (104-bit). Vulnerabilities: Susceptible to various attacks due to weak key management and encryption methodology. Shared key for authentication, which means the same key is used for encryption and authentication Initialization Vector (IV): WEP uses a 24-bit IV to encrypt data packets. However, this IV is too short, which means it repeats over time. Attackers can exploit this by capturing enough packets and analyzing them to deduce the secret key.\nStatic Secret Key: WEP uses a static secret key shared among all users on the network. Once this key is compromised, all data transmitted over the network becomes accessible to attackers. Additionally, there\u0026rsquo;s no mechanism for key management or rotation.\nAttackers can exploit the Initialization Vector (IV) in WEP encryption by capturing enough encrypted packets from the network. Because WEP uses a relatively short 24-bit IV, it repeats after a certain number of packets. When attackers capture multiple packets encrypted with the same IV, they can use statistical analysis to deduce patterns in the encryption and potentially recover the secret key. This weakness allows attackers to decrypt intercepted traffic and gain unauthorized access to the network.\nWPA (WiFi Protected Access): Strengths: Provides enhanced security compared to WEP, leveraging AES encryption. Versions: Includes WPA2 and the more recent WPA3 for improved security measures. EAP (Extensible Authentication Protocol): Definition:\nEAP is an authentication framework frequently used in wireless networks and point-to-point connections. It provides a method for a client (like a user\u0026rsquo;s device) to authenticate to a server (like an access point) before gaining access to the network. Key Features:\nExtensible: Supports various authentication methods. Flexible: Can accommodate diverse network infrastructures. Secure: Protects authentication credentials during transmission. Authentication Methods:\nEAP-TLS (Transport Layer Security): Uses digital certificates for authentication. EAP-TTLS (Tunneled TLS): Creates an encrypted tunnel for authentication. EAP-PEAP (Protected EAP): Similar to EAP-TTLS, often used with Microsoft products. EAP-SIM (Subscriber Identity Module): Common in GSM and UMTS networks for SIM card authentication. EAP-AKA (Authentication and Key Agreement): Derived from EAP-SIM, used in 3GPP networks. Protocol Operation:\nEAP operates between the link layer (such as PPP or IEEE 802.1X) and the authentication protocol layer. It begins with a negotiation phase where the server proposes supported methods and the client selects one. Authentication occurs within an encrypted tunnel, ensuring privacy and security. LEAP (Lightweight Extensible Authentication Protocol): Definition:\nLEAP is a proprietary EAP authentication method developed by Cisco Systems. Initially popular but now considered insecure due to vulnerabilities like dictionary attacks. Key Features:\nFast: Offers quick authentication. Integration: Often used in Cisco\u0026rsquo;s wireless infrastructure. Protocol Operation:\nLEAP involves a challenge-response mechanism where the client encrypts the challenge with a hashed password. Vulnerabilities arise due to weak password hashing, making it susceptible to dictionary attacks. Security Concerns:\nVulnerable to dictionary attacks due to weak password hashing. No mutual authentication between client and server. Considered obsolete and insecure, not recommended for use. PEAP (Protected Extensible Authentication Protocol): Definition:\nPEAP is an EAP authentication framework designed to strengthen EAP by encapsulating it within a secure tunnel. Developed by Cisco, Microsoft, and RSA Security. Key Features:\nSecurity: Provides protection against eavesdropping and man-in-the-middle attacks. Compatibility: Widely supported across various platforms and operating systems. Flexibility: Allows different inner authentication methods like EAP-TLS or MS-CHAPv2. Protocol Operation:\nInitiates with an unauthenticated phase where the server presents its digital certificate. Establishes a TLS-encrypted tunnel for subsequent authentication, ensuring confidentiality. Within the tunnel, EAP methods like EAP-TLS or MS-CHAPv2 are used for actual authentication. Deployment Recommendations:\nPEAP with EAP-TLS offers strong security but requires client-side certificates. PEAP with MS-CHAPv2 is simpler to deploy, using username/password authentication. WPA/2/3 sont des protocoles de sécurité utilisés pour sécuriser la communication sur les réseaux sans fil en fournissant un chiffrement des données et en empêchant les accès non autorisés au réseau.\nL/P/EAP quant à eux, sont des protocoles d\u0026rsquo;authentification utilisés pour vérifier l\u0026rsquo;identité des utilisateurs et des appareils qui tentent de se connecter au réseau sans fil. Ils permettent de s\u0026rsquo;assurer que seuls les utilisateurs autorisés peuvent accéder au réseau.\nTACACS (Terminal Access Controller Access-Control System) Definition:\nTACACS is a security protocol used for controlling access to network devices, especially in military and government environments. Developed by the Department of Defense (DoD) in the United States. Key Features:\nAccess Control: Regulates who can access network terminals and devices. Authentication: Requires users to authenticate before granting access. Authorization: Defines user privileges and permissions based on roles. Auditing: Records user activities for monitoring and compliance purposes. Components:\nTerminal Access Controller (TAC): Hardware or software device responsible for enforcing access control policies. TACACS+ Server: Centralized server handling authentication, authorization, and accounting. TACACS+ Client: Network device requesting access to resources, communicates with the TACACS+ server. Protocol Operation:\nTACACS+ operates over TCP port 49. Authentication involves a three-step process: Authentication, Authorization, and Accounting (AAA). Communication between the client and server is encrypted for security. Security Benefits:\nGranular Control: Allows fine-grained control over access permissions. Accountability: Enables tracking of user actions for auditing and compliance. Scalability: Supports large-scale networks with distributed access control policies. Deployment Considerations:\nSuitable for environments requiring stringent access control and audit capabilities. Integrates well with existing network infrastructure, including routers, switches, and firewalls. Alternatives:\nRADIUS (Remote Authentication Dial-In User Service): Another widely used AAA protocol, more common in general networking environments. Diameter: Evolved version of RADIUS, designed for modern telecommunications networks. Disassociation Attack Attack Vector: Involves sending disassociation frames to disrupt communication between WAP and clients. Objective: Primarily used to create network disruptions or as a precursor to more sophisticated attacks. Wireless Network Hardening Strategies Disabling Broadcasting:\nPurpose: Conceals SSID to minimize visibility of the network, increasing difficulty for unauthorized users to identify and access it. WPA (WiFi Protected Access):\nImplementation: Deployment of WPA2 or WPA3 for robust encryption and authentication capabilities, crucial for securing wireless communications. MAC Filtering:\nFunctionality: Permits or denies network access based on predefined MAC address lists, adding an additional layer of access control. Deploying EAP-TLS:\nMethodology: Leverages digital certificates and Public Key Infrastructure (PKI) for strong authentication and encryption, enhancing overall network security posture. Virtual Private Networks (VPN) 1. What is a VPN?\nA technology enabling secure and encrypted connections between a private network and remote devices. Provides secure access to network resources and services remotely. 2. Why Use VPNs?\nEncrypts connection, making it difficult for attackers to intercept data. Allows remote access to network resources from anywhere with an internet connection. Cost-effective solution for remote access compared to leased lines or dedicated connections. 3. Components and Requirements:\nVPN Client: Installed on remote devices to establish and maintain VPN connections (e.g., OpenVPN). VPN Server: Responsible for accepting VPN connections and routing traffic. Encryption: Utilizes encryption algorithms and protocols like AES and IPsec. Authentication: VPN server and client authenticate each other for a secure connection. 4. VPN Connection Ports:\nTCP/1723 for PPTP VPN connections. UDP/500 for IKEv1 and IKEv2 VPN connections. 5. IPsec:\nDefinition: Internet Protocol Security providing encryption and authentication for internet communications. Protocols Used: AH (Authentication Header) and ESP (Encapsulating Security Payload). Modes: Transport Mode (end-to-end communication) and Tunnel Mode (VPN tunnel between networks). 6. Necessary Protocols for IPsec VPN Traffic:\nIP: UDP/50-51 for routing packets. IKE: UDP/500 for negotiating secure keys. ESP: UDP/4500 for encrypting VPN traffic. 7. PPTP:\nDefinition: Point-to-Point Tunneling Protocol for creating VPNs. Function: Establishes a secure tunnel between client and server, encapsulating data. Security Concerns: Vulnerabilities make it obsolete and insecure. Alternatives: L2TP/IPsec, IPsec/IKEv2, OpenVPN for more secure options. Note: Since 2012, PPTP is no longer considered secure due to vulnerabilities in the authentication method (MSCHAPv2) using outdated DES encryption.\nCisco IOS: Vendor Specific Information Overview:\nCisco IOS is the operating system for Cisco network devices like routers and switches. It offers IPv6 support, QoS, security features (encryption, authentication), virtualization features (VPLS, VRF), etc. Managed through CLI and GUI. Supports various protocols and services: routing protocols, switching protocols, network services, security features. Passwords:\nUser Password: For logging in. Enable Password: For \u0026ldquo;enable\u0026rdquo; mode. The \u0026ldquo;enable\u0026rdquo; mode is the mode where you have access to advanced functions and settings. Secret: For securing access to certain functions. Enable Secret: Extra-secure password for \u0026ldquo;enable\u0026rdquo; mode. VLANs:\nLogical grouping of network endpoints on switches. Segments networks based on factors like department or function. Offers benefits like better organization, increased security, simplified administration, and increased performance. Cisco switches provide the VLAN IDs/numbers 1-4094 (0 and 4095 are reserved IDs and cannot be used); IDs 1-1005 (VLAN 1 is known as the default VLAN and cannot/should not be altered nor deleted) are known as normal-range VLANs, with IDs 1002-1005 being reserved for Token Ring and Fiber Distributed Data Interface (FDDI) VLANs, while IDs 1006-4094 are known as extended-range VLANs. By default, any customization applied for normal-range VLANs is saved in the VLAN database (the vland.dat file), in contrast to extended-range VLANs, which do not have their customizations saved. VLANs 2-1001 stored in vlan.dat can have parameters including name, type, state, and maximum transmission unit (MTU).\nVLAN Memberships:\nPorts assigned to VLANs statically or dynamically. Static: Manual assignment per port. Dynamic: Based on MAC addresses or protocols. The system administrator can register the MAC addresses in a centralized VLAN management service/database, such as the VLAN Membership Policy Server (VMPS)\nAccess and Trunk Ports:\nAccess Ports: Belong to one VLAN, carry traffic for that VLAN. Trunk Ports: Carry traffic for multiple VLANs. VLAN Identification:\nISL: Cisco-proprietary, deprecated. IEEE 802.1Q: Industry standard, adds VLAN tag to Ethernet frame. ![[Pasted image 20240402094148.png]]\nTag protocol identifier (TPID) is a 16-bit field always set to 0x8100 to identify the Ethernet frame as an 802.1Q-tagged frame. Tag Control Information (TCI) is a 16-bit field containing Priority code point (PCP), Drop eligible indicator (DEI) (previously known as Canonical format indicator (CFI)), and VLAN identifier (VID). The main field concerning VLANs is VID, occupying the low-order 12-bits of TCI. Since it is 12 bits, it allows 2^12 - 2 = 4096 (remember, 0 and 4095 are reserved) VLAN IDs. Therefore, an 802.1Q-tagged frame can contain information for 4094 VLANs; the practice of inserting multiple 802.1Q tags within a single packet is known as Double Tagging, introduced by 802.1ad. VLAN tagging is the process of inserting VLAN information into an 802.1Q Ethernet header, while VLAN untagging is the process of removing the VLAN information from an 802.1Q-tagged Ethernet frame and forwarding the packet to the destined ports.\nVLAN-Capable NICs:\nSome NICs support VLAN tagging. Can be configured in Linux and Windows. Analyzing VLAN Tagged Traffic:\nWireshark can analyze VLAN-tagged traffic. Filters like \u0026ldquo;vlan\u0026rdquo; and \u0026ldquo;vlan.id\u0026rdquo; can be used to isolate VLAN traffic. Additionally, to enumerate the used VLAN IDs from a packet dump, we can utilize tshark:\ntshark -r \u0026#34;The Ultimate PCAP v20221220.pcapng\u0026#34; -T fields -e vlan.id | sort -n -u 1 2 3 7 10 20 30 40 50 60 70 80 90 121 125 224 VLAN Attacks:\nVLAN Hopping: Exploits Dynamic Trunking Protocol (DTP) to jump between VLANs.\nWe can use tools such as Yersinia to perform VLAN hopping attacks: An adversary needs to configure a host to mimic/act like a switch to take advantage of the automatic trunking port feature enabled by default on most switch ports. To exploit VLAN hopping, an adversary must be able to physically connect with a switch port that has DTP enabled. The adversary can abuse this connection by configuring a host connected to the switch on that specific port to spoof 802.1Q signaling and the DTP packets. If successful, the switch will eventually establish a trunk link with the adversary\u0026rsquo;s host, exposing the network packets, not only for a specific VLAN. Double-tagging VLAN Hopping - An advanced attack that exploits the practice of VLAN double-tagging. - Attackers embed a hidden 802.1Q tag inside an Ethernet frame, allowing it to traverse to a different VLAN than intended.\nAttack Steps:\nSend Double-Tagged Frame:\nAdversary sends a double-tagged 802.1Q Ethernet frame to the switch. Outer header contains VLAN ID of the adversary (native VLAN of the trunk port). Example: Native VLAN (e.g., VLAN 10), target VLAN (e.g., VLAN 30). Arrival and Tag Stripping:\nOuter VLAN tag is seen destined for the native VLAN (e.g., VLAN 10). VLAN 10 tag is removed, and the frame is forwarded on all VLAN 10 ports. On the trunk port, VLAN 10 tag is stripped, but VLAN 30 tag remains intact. First switch does not inspect the VLAN 30 tag. Forwarding Decision:\nSwitch looks at the inner 802.1Q tag sent by the adversary. Decides to forward the frame for VLAN 30, the adversary\u0026rsquo;s chosen VLAN. Second switch forwards the frame to the victim port directly or floods it based on MAC address table entry. Tools for Execution:\nScapy: Allows carrying out the double-tagging VLAN hopping attack programmatically. Yersinia: Another tool capable of executing the double-tagging VLAN hopping attack. Mitigation Techniques:\nVLAN Access Control Lists (VACLs): Implement VACLs to restrict VLAN traffic at Layer 2. Port Security: Enable port security features to limit the number of MAC addresses per port. VLAN Pruning: Configure VLAN pruning to prevent unnecessary VLAN traffic on trunk ports. Intrusion Detection Systems (IDS): Employ IDS to detect and respond to abnormal VLAN hopping activity. VXLAN (Virtual eXtensible Local Area Network):\nPurpose: Scalable Layer 2 overlay network over Layer 3 infrastructure. Challenge Addressed: Limitations of traditional Layer 2 networks in data center environments. Key Features: Extends Layer 2 networks seamlessly across data center landscapes. Uses VXLAN segments to isolate and secure network traffic. Employs 24-bit VXLAN Network Identifier (VNI) for segment identification. Supports up to 16 million VXLAN segments for scalability. Use Cases: Multi-tenant environments with virtual machines (VMs), large-scale data centers. Cisco Discovery Protocol (CDP):\nPurpose: Layer 2 network protocol for gathering device information in Cisco networks. Functionality: Discovers and tracks network topology, aids in network management and troubleshooting. Key Features: Provides information about directly connected Cisco devices (routers, switches, etc.). Shares device name, IP address, port name, OS, hardware platform, and capabilities. Enabled by default on Cisco devices but can be disabled for security reasons. Spanning Tree Protocol (STP):\nPurpose: Prevents network loops in Ethernet networks with redundant connections. Functionality: Ensures loop-free topology and prevents packet circulation in loops. Key Features: Uses 802.1w (Rapid STP) or 802.1d (Classic STP) versions. Determines root switch, port roles (e.g., root port, designated port), and bridge IDs. Configurable parameters include max age, hello time, forward delay. Prevents link blocking and ensures network resiliency through multipathing. Key Exchange Symmetric Encryption:\nAES (Advanced Encryption Standard): Symmetric encryption algorithm using keys of 128, 192, or 256 bits. Primarily used for large-scale data encryption. DES (Data Encryption Standard): Former symmetric encryption algorithm using a 56-bit key. Used in the past but now largely obsolete due to its vulnerability. 3DES (Triple Data Encryption Standard): Enhanced version of DES that applies DES three times with three different keys for improved security. Used as a secure alternative to DES. Asymmetric Encryption:\nRSA (Rivest-Shamir-Adleman): Asymmetric encryption algorithm used for key encryption, digital signatures, and other security applications. ECC (Elliptic Curve Cryptography): Family of asymmetric encryption algorithms based on elliptic curves, offering security comparable to RSA with shorter keys. Key Exchange:\nDH (Diffie-Hellman): Public key encryption protocol for secure key exchange.\nECDH (Elliptic Curve Diffie-Hellman): DH variant using elliptic curves for improved performance and security.\nIKE (Internet Key Exchange): Protocol used to negotiate and establish Security Associations (SAs) in IPsec VPNs. There are several IKE modes: - Main Mode: A mode where all security parameters are exchanged securely and authenticated in multiple steps. - Aggressive Mode: A mode where security parameters are exchanged in a single step, making it faster but less secure than Main Mode.\nIKEv1: Uses ISAKMP (Internet Security Association and Key Management Protocol) for negotiating security parameters.\nIKEv2: Enhanced version of IKEv1, offering improved performance and security, as well as support for client mobility.\nDigital Signature:\nDSA (Digital Signature Algorithm): Digital signature algorithm used for message authentication and non-repudiation. ECDSA (Elliptic Curve Digital Signature Algorithm): DSA variant based on elliptic curves. Authentication:\nHMAC (Hash-based Message Authentication Code): Authentication method based on hash functions, used with symmetric encryption algorithms. PSK (Pre-Shared Key): Authentication mode used in network security protocols, where a key is shared in advance between parties. Authentication Protocols Kerberos\nDescription: Key Distribution Center (KDC) based authentication protocol using tickets in domain environments. SRP (Secure Remote Password)\nDescription: Password-based authentication protocol using cryptography to protect against eavesdropping and man-in-the-middle attacks. SSL\nDescription: Cryptographic protocol for secure communication over a computer network. TLS\nDescription: Successor to SSL, provides communication security over the internet using cryptography. OAuth\nDescription: Open standard for authorization allowing third-party access to web resources without sharing passwords. OpenID\nDescription: Decentralized authentication protocol enabling single identity sign-in across multiple websites. SAML\nDescription: XML-based standard for securely exchanging authentication and authorization data between parties. 2FA (Two-Factor Authentication)\nDescription: Authentication method using two different factors to verify a user\u0026rsquo;s identity. FIDO (Fast IDentity Online Alliance)\nDescription: Consortium developing open standards for strong authentication. PKI (Public Key Infrastructure)\nDescription: System for securely exchanging information using public and private keys for encryption and digital signatures. SSO (Single Sign-On)\nDescription: Authentication method allowing a single set of credentials for access to multiple applications. MFA (Multi-Factor Authentication)\nDescription: Authentication method using multiple factors (e.g., password, phone, biometric data) to verify identity. PAP (Password Authentication Protocol)\nDescription: Simple authentication protocol sending user passwords in clear text over the network. CHAP (Challenge-Handshake Authentication Protocol)\nDescription: Authentication protocol using a three-way handshake to verify user identity. TCP/UDP Connections IP Packet\nDefinition: Data area used by the network layer to transmit data. Structure: Header: Contains routing and transmission information. Payload: Actual data being transmitted. IP Header Fields\nVersion: Indicates the IP protocol version. Internet Header Length: Size of the header in 32-bit words. Class of Service: Indicates data transmission importance. Total Length: Total packet length in bytes. Identification (ID): Identifies fragments of a packet. Flags: Indicate fragmentation. Fragment Offset: Indicates position of current fragment. Time to Live: Specifies packet lifespan on network. Protocol: Specifies transmission protocol (TCP/UDP). Checksum: Detects errors in the header. Source/Destination: Addresses of sender and recipient. Options: Optional routing information. Padding: Fills packet to full word length. IP Record-Route Field\nPurpose: Records route to destination device. Usage: ICMP Echo Reply packets include passing device IP addresses. Example: Displayed when using ping -R [destination]. Traceroute\nPurpose: Trace route to destination accurately. Process: Send TCP SYN packet with TTL of 1. Receive ICMP Time-Exceeded packet and note router IP. Repeat with increased TTL until response from destination. TCP\nSegments: Divided into headers and payloads. Header Fields: Source/Destination Port Sequence/Confirmation Number Control Flags Window Size Checksum Urgent Pointer UDP\nDatagrams: Small data packets. Characteristics: Connectionless. Data sent directly without prior connection. Blind Spoofing\nDefinition: Manipulating IP header to send false information. Method: Falsifying source/destination addresses. Manipulating TCP packet fields. Usage: Disrupting network integrity. Breaking connections. Monitoring network traffic. Intercepting information. Cryptography 1. Symmetric Encryption:\nDefinition: Uses same key for encryption and decryption. Example Algorithms: AES, DES. Key Management: Key distribution, storage, and exchange are critical. Security: Dependent on key secrecy. 2. Asymmetric Encryption:\nDefinition: Uses two keys: public and private. Example Algorithms: RSA, PGP, ECC. Key Advantage: No need for secret key exchange. Applications: E-Signatures, SSL/TLS, VPNs. 3. Data Encryption Standard (DES):\nDefinition: Symmetric-key block cipher. Key Length: Actual key length is 56 bits. Triple DES (3DES): Encrypts data with three rounds of encryption. Security Limitations: Vulnerable due to short key length. 4. Advanced Encryption Standard (AES):\nDefinition: Symmetric encryption with longer key lengths. Key Lengths: AES-128, AES-192, AES-256. Performance: Faster and more efficient than DES. Applications: WLAN, IPsec, SSH. 5. Cipher Modes:\nElectronic Code Book (ECB): Not recommended due to vulnerability. Cipher Block Chaining (CBC): Default mode for AES, widely used. Cipher Feedback (CFB): Suitable for real-time encryption. Output Feedback (OFB): Better for data streams, used in PKCS and SSH. Counter (CTR): Encrypts real-time data streams. Galois/Counter (GCM): Protects confidentiality and integrity together. 6. Considerations:\nSecurity vs. Efficiency: Trade-offs in encryption methods. Key Length: Longer keys offer greater security. Applications: Choose encryption methods based on specific needs. Mode Selection: Depends on message characteristics and security requirements. ","permalink":"http://localhost:1313/posts/network-fundamentals/","summary":"Network Terms WAN (Wide Area Network):\nDefinition: The Internet; a large network connecting multiple LANs. Identification: WAN-specific routing protocols like BGP and non-RFC 1918 IP schemas. LAN (Local Area Network):\nDefinition: Internal networks (e.g., home or office). IP Addressing: Typically RFC 1918 addresses. WLAN (Wireless Local Area Network):\nDefinition: Wireless variant of LAN, enabling Wi-Fi access. Security: Mainly a security designation; no fundamental difference from LAN. VPN (Virtual Private Network):","title":"Network fundamentals"},{"content":"HyperText Transfer Protocol (HTTP) Definition: HTTP is an application-level protocol used for accessing World Wide Web resources. It facilitates communication between a client and a server.\nComponents of a URL:\nScheme: Identifies the protocol (http://, https://). User Info: Optional credentials (admin:password@). Host: Resource location (hostname or IP address). Port: Separated by a colon (:80 if not specified). Path: Points to the resource being accessed (/dashboard.php) Query String: Parameters and values separated by \u0026amp; (?login=true). Fragments: Processed by browsers on the client-side (#status) HTTP Flow:\nUser enters URL. Browser sends request to DNS server. DNS server resolves domain to IP. Browser sends GET request to server. Server processes request and returns response. Browser renders response. cURL:\nCommand-line tool for sending HTTP requests. Can be used for scripting and automation. Doesn\u0026rsquo;t render HTML/CSS/JS, prints raw format. Useful for penetration testing. Common flags: -o: Write output to a file. -s: Silent mode. -u: Specify user and password. -A: Set User-Agent. -i: Include protocol response headers. -d: HTTP POST data. -h: Help menu. Hypertext Transfer Protocol Secure (HTTPS) Definition: HTTPS (HTTP Secure) encrypts communications between a web browser and a web application, preventing interception of sensitive data.\nClear-text vs. Encrypted: HTTP sends data in clear-text, making it vulnerable to interception. HTTPS encrypts data, making it unreadable to unauthorized parties.\nIdentification:\nHTTPS URLs start with https://. Browsers show a lock icon for HTTPS sites. 2. HTTPS Flow\nOperation:\nUser enters URL (http:// or https://). Browser resolves domain and connects to server. Initial connection attempts HTTP on port 80. Server redirects to HTTPS on port 443. Client and server exchange encryption keys. Encrypted communication begins. Security Considerations:\nEncrypted data can still reveal visited URLs if DNS resolution is not encrypted. Downgrade attacks can revert HTTPS to HTTP; modern browsers and servers mitigate this risk. 3. cURL for HTTPS\nUsage:\ncURL handles HTTPS by default. May encounter issues with invalid or outdated SSL certificates. Handling Invalid Certificates:\nBy default, cURL rejects communication with sites having invalid certificates. Use -k flag to skip certificate validation. HTTP Requests and Responses 1. HTTP Request\nOverview:\nMade by client (e.g., cURL/browser). Contains request details like method, path, headers, and data. Headers separated by new lines. Example:\nGET /users/login.html HTTP/1.1 Host: inlanefreight.com User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36 2. HTTP Response\nOverview:\nSent by server after processing request. Contains response code, headers, and optional response body. Example:\nHTTP/1.1 200 OK Date: Tue, 21 Jul 2020 05:20:15 GMT Server: Apache/X.Y.ZZ (Ubuntu) Content-Length: 464 Content-Type: text/html; charset=iso-8859-1 3. cURL\nUsage:\nUse -v flag to view verbose output with both request and response details. Helpful for debugging and penetration testing. Example:\ncurl inlanefreight.com -v 4. Browser DevTools\nOverview:\nBuilt-in tools for web developers. Accessible via [CTRL+SHIFT+I] or [F12] in most browsers. Network Tab:\nDisplays all web requests made by the browser. Shows response status, method, URL, and path. Usage:\nUseful for monitoring network activity and debugging web requests. Can inspect request and response details, including headers and raw response body. HTTP Headers HTTP headers play a crucial role in communication between clients and servers, providing essential information about requests and responses.\nGeneral Headers General headers describe the message itself, independent of its content. common to both the request and response\nHeader Example Description Date Date: Wed, 16 Feb 2022 10:38:44 GMT Holds the date and time when the message originated, preferably in UTC time zone. Connection Connection: close Indicates if the network connection should stay open (keep-alive) or be closed (close) after the request/response completes. Entity Headers Entity headers describe the content being transferred. common to both the request and response\nHeader Example Description Content-Type Content-Type: text/html Describes the type of resource being transferred, including the character encoding. Media-Type Media-Type: application/pdf Indicates the type of media being transferred, such as PDF, image, etc. Boundary boundary=\u0026quot;b4e4fbd93540\u0026quot; Marks the boundary between different parts of the content, often used in multipart messages. Content-Length Content-Length: 385 Specifies the size of the content being transferred, in bytes. Content-Encoding Content-Encoding: gzip Indicates the encoding applied to the content to reduce its size, such as gzip compression. Request Headers Request headers are sent by the client in an HTTP request.\nHeader Example Description Host Host: www.example.com Specifies the host being queried for the resource. User-Agent User-Agent: Mozilla/5.0 Identifies the client making the request, typically including information about the browser, operating system, etc. Referer Referer: http://www.example.com/ Indicates the URL of the referring page from which the request originated. (/!\\ can be manipulated) Accept Accept: text/html Lists the media types that the client can handle, typically used by servers to determine the appropriate content type for the response. Cookie Cookie: sessionid=abc123 Contains cookies associated with the request, allowing for session management and tracking on the server-side. Authorization Authorization: BASIC cGFzc3dvcmQK Another method for the server to identify clients. After successful authentication, the server returns a token unique to the client. Unlike cookies, tokens are stored only on the client-side and retrieved by the server per request Response Headers Response headers are sent by the server in an HTTP response.\nHeader Example Description Server Server: Apache/2.4.41 Specifies information about the server software handling the request. Set-Cookie Set-Cookie: sessionid=abc123; Expires=... Instructs the client to store a cookie for session management or other purposes. WWW-Authenticate WWW-Authenticate: Basic realm=\u0026quot;Restricted\u0026quot; Specifies the authentication method required for accessing the requested resource. Security Headers Security headers enhance the security of web applications.\nHeader Example Description Content-Security-Policy Content-Security-Policy: script-src 'self' Defines the policy for executing scripts and other resources, helping prevent XSS attacks. Strict-Transport-Security Strict-Transport-Security: max-age=31536000 Instructs the browser to only access the site over HTTPS, protecting against man-in-the-middle attacks and protocol downgrade attacks. Referrer-Policy Referrer-Policy: origin Controls how much referrer information is included with requests, helping protect user privacy. Displaying Headers Use -I flag to show only response headers: curl -I https://www.example.com Use -i flag to show both headers and response body: curl -i https://www.example.com Setting Headers Use -H flag to set request headers: curl -H \u0026quot;Authorization: Bearer token123\u0026quot; https://www.example.com Some headers have dedicated flags like -A for User-Agent: curl -A \u0026quot;Mozilla/5.0\u0026quot; https://www.example.com Browser DevTools Browser DevTools provide insights into network requests.\nNavigate to Network tab to view requests. Click on a request to see headers in the Headers tab. Use the Raw button to view headers in raw format. HTTP Methods and Codes The following are some of the commonly used methods:\nMethod Description GET Requests a specific resource. Additional data can be passed to the server via query strings in the URL (e.g. ?param=value). POST Sends data to the server. It can handle multiple types of input, such as text, PDFs, and other forms of binary data. This data is appended in the request body present after the headers. The POST method is commonly used when sending information (e.g. forms/logins) or uploading data to a website, such as images or documents. HEAD Requests the headers that would be returned if a GET request was made to the server. It doesn\u0026rsquo;t return the request body and is usually made to check the response length before downloading resources. PUT Creates new resources on the server. Allowing this method without proper controls can lead to uploading malicious resources. DELETE Deletes an existing resource on the webserver. If not properly secured, can lead to Denial of Service (DoS) by deleting critical files on the web server. OPTIONS Returns information about the server, such as the methods accepted by it. PATCH Applies partial modifications to the resource at the specified location. Informational responses (1xx): 100 Continue: The server has received the initial part of the request and will continue processing it. Successful responses (2xx): 200 OK: The request has succeeded. The response generally includes the requested information. 201 Created: The request has been fulfilled, and a new resource is created. 204 No Content: The server successfully processed the request but does not need to return any content. Redirection messages (3xx): 301 Moved Permanently: The requested resource has been permanently moved to a new URL. 302 Found (Previously \u0026ldquo;Moved Temporarily\u0026rdquo;): The requested resource temporarily resides under a different URL. 304 Not Modified: The resource has not been modified since the last request. Client error responses (4xx): 400 Bad Request: The server cannot process the request due to a client error. 401 Unauthorized: The request requires user authentication. 403 Forbidden: The server understood the request, but refuses to authorize it. 404 Not Found: The server cannot find the requested resource. Server error responses (5xx): 500 Internal Server Error: A generic error message indicating that the server encountered an unexpected condition. 502 Bad Gateway: The server, while acting as a gateway or proxy, received an invalid response from the upstream server. 503 Service Unavailable: The server is currently unable to handle the request due to temporary overload or maintenance. Unofficial codes: 418 I\u0026rsquo;m a teapot: This code was defined in 1998 as one of the traditional IETF April Fools\u0026rsquo; jokes. It\u0026rsquo;s not expected to be implemented by actual HTTP servers. Uncommon but noteworthy: 402 Payment Required: Reserved for future use. It\u0026rsquo;s not currently in use. Get \u0026amp; Post GET:\nGET method is used to request data from a specified resource. When a client sends a GET request to a server, parameters are sent in the URL as query strings. For example, in http://example.com/page?name=John\u0026amp;age=30, \u0026ldquo;name\u0026rdquo; and \u0026ldquo;age\u0026rdquo; are parameters with values \u0026ldquo;John\u0026rdquo; and \u0026ldquo;30\u0026rdquo;. GET requests are often used to retrieve data, such as web pages or static resources (images, CSS files, etc.). GET requests can be cached and are typically stored in the browser history, making them less secure for sending sensitive data. POST:\nPOST method is used to send data to the server for processing. Unlike GET, data sent via POST is included in the body of the HTTP request, rather than in the URL. This allows for sending larger and more complex data. POST requests are often used to submit online forms, upload files, or perform actions that modify the server\u0026rsquo;s state. POST requests are typically not cached and are not stored in the browser history, making them more secure for sending sensitive data. cURL options X, \u0026ndash;request [HTTP METHOD]\nSpecifies the HTTP method to be used in the request (GET, POST, PUT, DELETE, etc.). -d, \u0026ndash;data [DATA]\nSends data in the request body. Useful for POST requests or requests that require data. curl -X POST -d \u0026#39;username=admin\u0026amp;password=admin\u0026#39; http://\u0026lt;SERVER_IP\u0026gt;:\u0026lt;PORT\u0026gt;/` -H, \u0026ndash;header [HEADER]\nAdds a custom HTTP header to the request. Useful for setting headers like authentication tokens or content type. curl -H \u0026#39;Authorization: Basic YWRtaW46YWRtaW4=\u0026#39; http://\u0026lt;SERVER_IP\u0026gt;:\u0026lt;PORT\u0026gt;/ -i, \u0026ndash;include\nIncludes the HTTP response headers in the output. Helpful for debugging or analyzing responses. -o, \u0026ndash;output [FILE]\nWrites output to a specified file instead of standard output. Useful for saving responses to a file. -L, \u0026ndash;location\nFollows HTTP redirects. This is useful when accessing resources that have moved. -u, \u0026ndash;user [USER:PASSWORD]\nSpecifies the username and password for HTTP authentication. Useful for accessing password-protected resources. -k, \u0026ndash;insecure\nAllows curl to perform \u0026ldquo;insecure\u0026rdquo; SSL connections. This is helpful when dealing with self-signed certificates or testing environments. -v, \u0026ndash;verbose\nEnables verbose output, showing detailed information about the request and response. Useful for debugging. -vvv : ultra developped -XGET, -XPOST, etc.\nShortcut for specifying the HTTP method. For example, -XGET is equivalent to --request GET. -F, \u0026ndash;form [KEY=VALUE]\nSends form data in a multipart/form-data request. Useful for submitting HTML forms with file uploads. -b, \u0026ndash;cookie [COOKIE_STRING]\nSends cookies in the request header. Helpful for maintaining session state. \u0026ndash;cookie-jar [FILE]\nStores cookies from the response in a file for later use. Useful for maintaining session state across multiple requests. \u0026ndash;upload-file [FILE]\nUploads a file to the server. Useful for sending files in POST requests. -x, \u0026ndash;proxy [PROTOCOL://HOST[:PORT]]\nSpecifies a proxy server to be used for the request. Helpful for accessing resources behind a firewall. curl -XPOST -b \u0026#34;PHPSESSID=1g8uj3f5ao4nkgu4b215v7egf4\u0026#34; -H \u0026#34;Content-type: application/json\u0026#34; -d \u0026#39;{\u0026#34;search\u0026#34;:\u0026#34;flag\u0026#34;}\u0026#39; http://83.136.252.32:43390/search.php ","permalink":"http://localhost:1313/posts/web-requests/","summary":"HyperText Transfer Protocol (HTTP) Definition: HTTP is an application-level protocol used for accessing World Wide Web resources. It facilitates communication between a client and a server.\nComponents of a URL:\nScheme: Identifies the protocol (http://, https://). User Info: Optional credentials (admin:password@). Host: Resource location (hostname or IP address). Port: Separated by a colon (:80 if not specified). Path: Points to the resource being accessed (/dashboard.php) Query String: Parameters and values separated by \u0026amp; (?","title":"Web requests"},{"content":"Learning Brief Intro to Hardware Attacks Linux Fundamentals MacOS Fundamentals Network Fundamentals Web Requests CTF Write ups ","permalink":"http://localhost:1313/notes/","summary":"Learning Brief Intro to Hardware Attacks Linux Fundamentals MacOS Fundamentals Network Fundamentals Web Requests CTF Write ups ","title":"📝 : Notes"},{"content":"Privacy Web Browser LibreWolf\nBrave\nTor\nSearch engine SearXNG : Select the instance of your choice based on factors like Search response time, Country\u0026hellip;\nStartpage\nWhoogle\nOS Tails\nQubesOS\nWhonix\nTools H8MAIL ","permalink":"http://localhost:1313/links/","summary":"Privacy Web Browser LibreWolf\nBrave\nTor\nSearch engine SearXNG : Select the instance of your choice based on factors like Search response time, Country\u0026hellip;\nStartpage\nWhoogle\nOS Tails\nQubesOS\nWhonix\nTools H8MAIL ","title":"Links"}]